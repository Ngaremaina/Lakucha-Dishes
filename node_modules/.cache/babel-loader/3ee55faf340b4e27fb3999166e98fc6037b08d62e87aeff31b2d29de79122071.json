{"ast":null,"code":"import { __awaiter, __generator, __assign } from 'tslib';\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, validateIndexedDBOpenable, isIndexedDBAvailable, isBrowserExtension, areCookiesEnabled } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Key to attach FID to in gtag params.\nvar GA_FID_KEY = 'firebase_id';\nvar ORIGIN_KEY = 'origin';\nvar FETCH_TIMEOUT_MILLIS = 60 * 1000;\nvar DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\nvar GtagCommand;\n(function (GtagCommand) {\n  GtagCommand[\"EVENT\"] = \"event\";\n  GtagCommand[\"SET\"] = \"set\";\n  GtagCommand[\"CONFIG\"] = \"config\";\n})(GtagCommand || (GtagCommand = {}));\n/**\r\n * Officially recommended event names for gtag.js\r\n * Any other string is also allowed.\r\n *\r\n * @public\r\n */\nvar EventName;\n(function (EventName) {\n  EventName[\"ADD_SHIPPING_INFO\"] = \"add_shipping_info\";\n  EventName[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\n  EventName[\"ADD_TO_CART\"] = \"add_to_cart\";\n  EventName[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\n  EventName[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\n  /**\r\n   * @deprecated\r\n   * This event name is deprecated and is unsupported in updated\r\n   * Enhanced Ecommerce reports.\r\n   */\n  EventName[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\n  EventName[\"EXCEPTION\"] = \"exception\";\n  EventName[\"GENERATE_LEAD\"] = \"generate_lead\";\n  EventName[\"LOGIN\"] = \"login\";\n  EventName[\"PAGE_VIEW\"] = \"page_view\";\n  EventName[\"PURCHASE\"] = \"purchase\";\n  EventName[\"REFUND\"] = \"refund\";\n  EventName[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\n  EventName[\"SCREEN_VIEW\"] = \"screen_view\";\n  EventName[\"SEARCH\"] = \"search\";\n  EventName[\"SELECT_CONTENT\"] = \"select_content\";\n  EventName[\"SELECT_ITEM\"] = \"select_item\";\n  EventName[\"SELECT_PROMOTION\"] = \"select_promotion\";\n  /** @deprecated */\n  EventName[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\n  EventName[\"SHARE\"] = \"share\";\n  EventName[\"SIGN_UP\"] = \"sign_up\";\n  EventName[\"TIMING_COMPLETE\"] = \"timing_complete\";\n  EventName[\"VIEW_CART\"] = \"view_cart\";\n  EventName[\"VIEW_ITEM\"] = \"view_item\";\n  EventName[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\n  EventName[\"VIEW_PROMOTION\"] = \"view_promotion\";\n  EventName[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\n})(EventName || (EventName = {}));\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\nfunction logEvent(gtagFunction, initializationPromise, eventName, eventParams, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var measurementId, params;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(options && options.global)) return [3 /*break*/, 1];\n          gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n          return [2 /*return*/];\n        case 1:\n          return [4 /*yield*/, initializationPromise];\n        case 2:\n          measurementId = _a.sent();\n          params = __assign(__assign({}, eventParams), {\n            'send_to': measurementId\n          });\n          gtagFunction(GtagCommand.EVENT, eventName, params);\n          _a.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\nfunction setCurrentScreen(gtagFunction, initializationPromise, screenName, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var measurementId;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(options && options.global)) return [3 /*break*/, 1];\n          gtagFunction(GtagCommand.SET, {\n            'screen_name': screenName\n          });\n          return [2 /*return*/, Promise.resolve()];\n        case 1:\n          return [4 /*yield*/, initializationPromise];\n        case 2:\n          measurementId = _a.sent();\n          gtagFunction(GtagCommand.CONFIG, measurementId, {\n            update: true,\n            'screen_name': screenName\n          });\n          _a.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\nfunction setUserId(gtagFunction, initializationPromise, id, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var measurementId;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(options && options.global)) return [3 /*break*/, 1];\n          gtagFunction(GtagCommand.SET, {\n            'user_id': id\n          });\n          return [2 /*return*/, Promise.resolve()];\n        case 1:\n          return [4 /*yield*/, initializationPromise];\n        case 2:\n          measurementId = _a.sent();\n          gtagFunction(GtagCommand.CONFIG, measurementId, {\n            update: true,\n            'user_id': id\n          });\n          _a.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\nfunction setUserProperties(gtagFunction, initializationPromise, properties, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var flatProperties, _i, _a, key, measurementId;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (!(options && options.global)) return [3 /*break*/, 1];\n          flatProperties = {};\n          for (_i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\n            key = _a[_i];\n            // use dot notation for merge behavior in gtag.js\n            flatProperties[\"user_properties.\" + key] = properties[key];\n          }\n          gtagFunction(GtagCommand.SET, flatProperties);\n          return [2 /*return*/, Promise.resolve()];\n        case 1:\n          return [4 /*yield*/, initializationPromise];\n        case 2:\n          measurementId = _b.sent();\n          gtagFunction(GtagCommand.CONFIG, measurementId, {\n            update: true,\n            'user_properties': properties\n          });\n          _b.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\nfunction setAnalyticsCollectionEnabled(initializationPromise, enabled) {\n  return __awaiter(this, void 0, void 0, function () {\n    var measurementId;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, initializationPromise];\n        case 1:\n          measurementId = _a.sent();\n          window[\"ga-disable-\" + measurementId] = !enabled;\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar logger = new Logger('@firebase/analytics');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\nfunction insertScriptTag(dataLayerName, measurementId) {\n  var script = document.createElement('script');\n  script.src = GTAG_URL + \"?l=\" + dataLayerName + \"&id=\" + measurementId;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  var dataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\nfunction gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\n  return __awaiter(this, void 0, void 0, function () {\n    var correspondingAppId, dynamicConfigResults, foundConfig, e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          correspondingAppId = measurementIdToAppId[measurementId];\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1, 7,, 8]);\n          if (!correspondingAppId) return [3 /*break*/, 3];\n          return [4 /*yield*/, initializationPromisesMap[correspondingAppId]];\n        case 2:\n          _a.sent();\n          return [3 /*break*/, 6];\n        case 3:\n          return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];\n        case 4:\n          dynamicConfigResults = _a.sent();\n          foundConfig = dynamicConfigResults.find(function (config) {\n            return config.measurementId === measurementId;\n          });\n          if (!foundConfig) return [3 /*break*/, 6];\n          return [4 /*yield*/, initializationPromisesMap[foundConfig.appId]];\n        case 5:\n          _a.sent();\n          _a.label = 6;\n        case 6:\n          return [3 /*break*/, 8];\n        case 7:\n          e_1 = _a.sent();\n          logger.error(e_1);\n          return [3 /*break*/, 8];\n        case 8:\n          gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\nfunction gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\n  return __awaiter(this, void 0, void 0, function () {\n    var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i, gaSendToList_1, sendToId, state_1, e_2;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 4,, 5]);\n          initializationPromisesToWaitFor = [];\n          if (!(gtagParams && gtagParams['send_to'])) return [3 /*break*/, 2];\n          gaSendToList = gtagParams['send_to'];\n          // Make it an array if is isn't, so it can be dealt with the same way.\n          if (!Array.isArray(gaSendToList)) {\n            gaSendToList = [gaSendToList];\n          }\n          return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];\n        case 1:\n          dynamicConfigResults = _a.sent();\n          _loop_1 = function (sendToId) {\n            // Any fetched dynamic measurement ID that matches this 'send_to' ID\n            var foundConfig = dynamicConfigResults.find(function (config) {\n              return config.measurementId === sendToId;\n            });\n            var initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\n            if (initializationPromise) {\n              initializationPromisesToWaitFor.push(initializationPromise);\n            } else {\n              // Found an item in 'send_to' that is not associated\n              // directly with an FID, possibly a group.  Empty this array,\n              // exit the loop early, and let it get populated below.\n              initializationPromisesToWaitFor = [];\n              return \"break\";\n            }\n          };\n          for (_i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {\n            sendToId = gaSendToList_1[_i];\n            state_1 = _loop_1(sendToId);\n            if (state_1 === \"break\") break;\n          }\n          _a.label = 2;\n        case 2:\n          // This will be unpopulated if there was no 'send_to' field , or\n          // if not all entries in the 'send_to' field could be mapped to\n          // a FID. In these cases, wait on all pending initialization promises.\n          if (initializationPromisesToWaitFor.length === 0) {\n            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\n          }\n          // Run core gtag function with args after all relevant initialization\n          // promises have been resolved.\n          return [4 /*yield*/, Promise.all(initializationPromisesToWaitFor)];\n        case 3:\n          // Run core gtag function with args after all relevant initialization\n          // promises have been resolved.\n          _a.sent();\n          // Workaround for http://b/141370449 - third argument cannot be undefined.\n          gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n          return [3 /*break*/, 5];\n        case 4:\n          e_2 = _a.sent();\n          logger.error(e_2);\n          return [3 /*break*/, 5];\n        case 5:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\nfunction wrapGtag(gtagCore,\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\ninitializationPromisesMap,\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\ndynamicConfigPromisesList,\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\nmeasurementIdToAppId) {\n  /**\r\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n   * @param command Gtag command type.\r\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n   * @param gtagParams Params if event is EVENT/CONFIG.\r\n   */\n  function gtagWrapper(command, idOrNameOrParams, gtagParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 6,, 7]);\n            if (!(command === GtagCommand.EVENT)) return [3 /*break*/, 2];\n            // If EVENT, second arg must be measurementId.\n            return [4 /*yield*/, gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams)];\n          case 1:\n            // If EVENT, second arg must be measurementId.\n            _a.sent();\n            return [3 /*break*/, 5];\n          case 2:\n            if (!(command === GtagCommand.CONFIG)) return [3 /*break*/, 4];\n            // If CONFIG, second arg must be measurementId.\n            return [4 /*yield*/, gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams)];\n          case 3:\n            // If CONFIG, second arg must be measurementId.\n            _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            // If SET, second arg must be params.\n            gtagCore(GtagCommand.SET, idOrNameOrParams);\n            _a.label = 5;\n          case 5:\n            return [3 /*break*/, 7];\n          case 6:\n            e_3 = _a.sent();\n            logger.error(e_3);\n            return [3 /*break*/, 7];\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  }\n\n  return gtagWrapper;\n}\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  var gtagCore = function () {\n    var _args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    }\n    // Must push IArguments object, not an array.\n    window[dataLayerName].push(arguments);\n  };\n  // Replace it with existing one if found\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\n  return {\n    gtagCore: gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\nfunction findGtagScriptOnPage() {\n  var scriptTags = window.document.getElementsByTagName('script');\n  for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {\n    var tag = _a[_i];\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _a;\nvar ERRORS = (_a = {}, _a[\"already-exists\" /* ALREADY_EXISTS */] = 'A Firebase Analytics instance with the appId {$id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each appId.', _a[\"already-initialized\" /* ALREADY_INITIALIZED */] = 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.', _a[\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */] = 'Firebase Analytics Interop Component failed to instantiate: {$reason}', _a[\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */] = 'Firebase Analytics is not supported in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}', _a[\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */] = 'IndexedDB unavailable or restricted in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}', _a[\"fetch-throttle\" /* FETCH_THROTTLE */] = 'The config fetch request timed out while in an exponential backoff state.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.', _a[\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */] = 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}', _a[\"no-api-key\" /* NO_API_KEY */] = 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid API key.', _a[\"no-app-id\" /* NO_APP_ID */] = 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid app ID.', _a);\nvar ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\nvar LONG_RETRY_FACTOR = 30;\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\nvar BASE_INTERVAL_MILLIS = 1000;\n/**\r\n * Stubbable retry data storage class.\r\n */\nvar RetryData = /** @class */function () {\n  function RetryData(throttleMetadata, intervalMillis) {\n    if (throttleMetadata === void 0) {\n      throttleMetadata = {};\n    }\n    if (intervalMillis === void 0) {\n      intervalMillis = BASE_INTERVAL_MILLIS;\n    }\n    this.throttleMetadata = throttleMetadata;\n    this.intervalMillis = intervalMillis;\n  }\n  RetryData.prototype.getThrottleMetadata = function (appId) {\n    return this.throttleMetadata[appId];\n  };\n  RetryData.prototype.setThrottleMetadata = function (appId, metadata) {\n    this.throttleMetadata[appId] = metadata;\n  };\n  RetryData.prototype.deleteThrottleMetadata = function (appId) {\n    delete this.throttleMetadata[appId];\n  };\n  return RetryData;\n}();\nvar defaultRetryData = new RetryData();\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\nfunction getHeaders(apiKey) {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\nfunction fetchDynamicConfig(appFields) {\n  var _a;\n  return __awaiter(this, void 0, void 0, function () {\n    var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          appId = appFields.appId, apiKey = appFields.apiKey;\n          request = {\n            method: 'GET',\n            headers: getHeaders(apiKey)\n          };\n          appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n          return [4 /*yield*/, fetch(appUrl, request)];\n        case 1:\n          response = _b.sent();\n          if (!(response.status !== 200 && response.status !== 304)) return [3 /*break*/, 6];\n          errorMessage = '';\n          _b.label = 2;\n        case 2:\n          _b.trys.push([2, 4,, 5]);\n          return [4 /*yield*/, response.json()];\n        case 3:\n          jsonResponse = _b.sent();\n          if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\n            errorMessage = jsonResponse.error.message;\n          }\n          return [3 /*break*/, 5];\n        case 4:\n          _b.sent();\n          return [3 /*break*/, 5];\n        case 5:\n          throw ERROR_FACTORY.create(\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */, {\n            httpStatus: response.status,\n            responseMessage: errorMessage\n          });\n        case 6:\n          return [2 /*return*/, response.json()];\n      }\n    });\n  });\n}\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\nfunction fetchDynamicConfigWithRetry(app,\n// retryData and timeoutMillis are parameterized to allow passing a different value for testing.\nretryData, timeoutMillis) {\n  if (retryData === void 0) {\n    retryData = defaultRetryData;\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, appId, apiKey, measurementId, throttleMetadata, signal;\n    var _this = this;\n    return __generator(this, function (_b) {\n      _a = app.options, appId = _a.appId, apiKey = _a.apiKey, measurementId = _a.measurementId;\n      if (!appId) {\n        throw ERROR_FACTORY.create(\"no-app-id\" /* NO_APP_ID */);\n      }\n\n      if (!apiKey) {\n        if (measurementId) {\n          return [2 /*return*/, {\n            measurementId: measurementId,\n            appId: appId\n          }];\n        }\n        throw ERROR_FACTORY.create(\"no-api-key\" /* NO_API_KEY */);\n      }\n\n      throttleMetadata = retryData.getThrottleMetadata(appId) || {\n        backoffCount: 0,\n        throttleEndTimeMillis: Date.now()\n      };\n      signal = new AnalyticsAbortSignal();\n      setTimeout(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n            signal.abort();\n            return [2 /*return*/];\n          });\n        });\n      }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\n      return [2 /*return*/, attemptFetchDynamicConfigWithRetry({\n        appId: appId,\n        apiKey: apiKey,\n        measurementId: measurementId\n      }, throttleMetadata, signal, retryData)];\n    });\n  });\n}\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\nfunction attemptFetchDynamicConfigWithRetry(appFields, _a, signal, retryData // for testing\n) {\n  var throttleEndTimeMillis = _a.throttleEndTimeMillis,\n    backoffCount = _a.backoffCount;\n  if (retryData === void 0) {\n    retryData = defaultRetryData;\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          appId = appFields.appId, measurementId = appFields.measurementId;\n          _b.label = 1;\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, setAbortableTimeout(signal, throttleEndTimeMillis)];\n        case 2:\n          _b.sent();\n          return [3 /*break*/, 4];\n        case 3:\n          e_1 = _b.sent();\n          if (measurementId) {\n            logger.warn(\"Timed out fetching this Firebase app's measurement ID from the server.\" + (\" Falling back to the measurement ID \" + measurementId) + (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_1.message + \"]\"));\n            return [2 /*return*/, {\n              appId: appId,\n              measurementId: measurementId\n            }];\n          }\n          throw e_1;\n        case 4:\n          _b.trys.push([4, 6,, 7]);\n          return [4 /*yield*/, fetchDynamicConfig(appFields)];\n        case 5:\n          response = _b.sent();\n          // Note the SDK only clears throttle state if response is success or non-retriable.\n          retryData.deleteThrottleMetadata(appId);\n          return [2 /*return*/, response];\n        case 6:\n          e_2 = _b.sent();\n          if (!isRetriableError(e_2)) {\n            retryData.deleteThrottleMetadata(appId);\n            if (measurementId) {\n              logger.warn(\"Failed to fetch this Firebase app's measurement ID from the server.\" + (\" Falling back to the measurement ID \" + measurementId) + (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_2.message + \"]\"));\n              return [2 /*return*/, {\n                appId: appId,\n                measurementId: measurementId\n              }];\n            } else {\n              throw e_2;\n            }\n          }\n          backoffMillis = Number(e_2.customData.httpStatus) === 503 ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n          throttleMetadata = {\n            throttleEndTimeMillis: Date.now() + backoffMillis,\n            backoffCount: backoffCount + 1\n          };\n          // Persists state.\n          retryData.setThrottleMetadata(appId, throttleMetadata);\n          logger.debug(\"Calling attemptFetch again in \" + backoffMillis + \" millis\");\n          return [2 /*return*/, attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];\n        case 7:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise(function (resolve, reject) {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    var timeout = setTimeout(resolve, backoffMillis);\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(function () {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(ERROR_FACTORY.create(\"fetch-throttle\" /* FETCH_THROTTLE */, {\n        throttleEndTimeMillis: throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  var httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\nvar AnalyticsAbortSignal = /** @class */function () {\n  function AnalyticsAbortSignal() {\n    this.listeners = [];\n  }\n  AnalyticsAbortSignal.prototype.addEventListener = function (listener) {\n    this.listeners.push(listener);\n  };\n  AnalyticsAbortSignal.prototype.abort = function () {\n    this.listeners.forEach(function (listener) {\n      return listener();\n    });\n  };\n  return AnalyticsAbortSignal;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction validateIndexedDB() {\n  return __awaiter(this, void 0, void 0, function () {\n    var e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!!isIndexedDBAvailable()) return [3 /*break*/, 1];\n          logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\n            errorInfo: 'IndexedDB is not available in this environment.'\n          }).message);\n          return [2 /*return*/, false];\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, validateIndexedDBOpenable()];\n        case 2:\n          _a.sent();\n          return [3 /*break*/, 4];\n        case 3:\n          e_1 = _a.sent();\n          logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\n            errorInfo: e_1\n          }).message);\n          return [2 /*return*/, false];\n        case 4:\n          return [2 /*return*/, true];\n      }\n    });\n  });\n}\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations FirebaseInstallations instance.\r\n *\r\n * @returns Measurement ID.\r\n */\nfunction initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName) {\n  return __awaiter(this, void 0, void 0, function () {\n    var dynamicConfigPromise, fidPromise, _a, dynamicConfig, fid, configProperties;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n          // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n          dynamicConfigPromise.then(function (config) {\n            measurementIdToAppId[config.measurementId] = config.appId;\n            if (app.options.measurementId && config.measurementId !== app.options.measurementId) {\n              logger.warn(\"The measurement ID in the local Firebase config (\" + app.options.measurementId + \")\" + (\" does not match the measurement ID fetched from the server (\" + config.measurementId + \").\") + \" To ensure analytics events are always sent to the correct Analytics property,\" + \" update the\" + \" measurement ID field in the local config or remove it from the local config.\");\n            }\n          }).catch(function (e) {\n            return logger.error(e);\n          });\n          // Add to list to track state of all dynamic config promises.\n          dynamicConfigPromisesList.push(dynamicConfigPromise);\n          fidPromise = validateIndexedDB().then(function (envIsValid) {\n            if (envIsValid) {\n              return installations.getId();\n            } else {\n              return undefined;\n            }\n          });\n          return [4 /*yield*/, Promise.all([dynamicConfigPromise, fidPromise])];\n        case 1:\n          _a = _c.sent(), dynamicConfig = _a[0], fid = _a[1];\n          // Detect if user has already put the gtag <script> tag on this page.\n          if (!findGtagScriptOnPage()) {\n            insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n          }\n          // This command initializes gtag.js and only needs to be called once for the entire web app,\n          // but since it is idempotent, we can call it multiple times.\n          // We keep it together with other initialization logic for better code structure.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          gtagCore('js', new Date());\n          configProperties = (_b = {},\n          // guard against developers accidentally setting properties with prefix `firebase_`\n          _b[ORIGIN_KEY] = 'firebase', _b.update = true, _b);\n          if (fid != null) {\n            configProperties[GA_FID_KEY] = fid;\n          }\n          // It should be the first config command called on this GA-ID\n          // Initialize this GA-ID and set FID on it using the gtag config API.\n          // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n          // `configProperties`.\n          gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n          return [2 /*return*/, dynamicConfig.measurementId];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\nvar initializationPromisesMap = {};\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\nvar dynamicConfigPromisesList = [];\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\nvar measurementIdToAppId = {};\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\nvar dataLayerName = 'dataLayer';\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\nvar gtagName = 'gtag';\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\nvar gtagCoreFunction;\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\nvar wrappedGtagFunction;\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\nvar globalInitDone = false;\n/**\r\n * For testing\r\n */\nfunction resetGlobalVars(newGlobalInitDone, newInitializationPromisesMap, newDynamicPromises) {\n  if (newGlobalInitDone === void 0) {\n    newGlobalInitDone = false;\n  }\n  if (newInitializationPromisesMap === void 0) {\n    newInitializationPromisesMap = {};\n  }\n  if (newDynamicPromises === void 0) {\n    newDynamicPromises = [];\n  }\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n/**\r\n * For testing\r\n */\nfunction getGlobalVars() {\n  return {\n    initializationPromisesMap: initializationPromisesMap,\n    dynamicConfigPromisesList: dynamicConfigPromisesList\n  };\n}\n/**\r\n * This must be run before calling firebase.analytics() or it won't\r\n * have any effect.\r\n * @param options Custom gtag and dataLayer names.\r\n */\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\" /* ALREADY_INITIALIZED */);\n  }\n\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\nfunction warnOnBrowserContextMismatch() {\n  var mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    var details = mismatchedEnvMessages.map(function (message, index) {\n      return \"(\" + (index + 1) + \") \" + message;\n    }).join(' ');\n    var err = ERROR_FACTORY.create(\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\nfunction factory(app, installations) {\n  warnOnBrowserContextMismatch();\n  var appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no-app-id\" /* NO_APP_ID */);\n  }\n\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\"The \\\"apiKey\\\" field is empty in the local Firebase config. This is needed to fetch the latest\" + (\" measurement ID for this Firebase app. Falling back to the measurement ID \" + app.options.measurementId) + \" provided in the \\\"measurementId\\\" field in the local Firebase config.\");\n    } else {\n      throw ERROR_FACTORY.create(\"no-api-key\" /* NO_API_KEY */);\n    }\n  }\n\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\" /* ALREADY_EXISTS */, {\n      id: appId\n    });\n  }\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    getOrCreateDataLayer(dataLayerName);\n    var _a = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName),\n      wrappedGtag = _a.wrappedGtag,\n      gtagCore = _a.gtagCore;\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName);\n  var analyticsInstance = {\n    app: app,\n    // Public methods return void for API simplicity and to better match gtag,\n    // while internal implementations return promises.\n    logEvent: function (eventName, eventParams, options) {\n      logEvent(wrappedGtagFunction, initializationPromisesMap[appId], eventName, eventParams, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setCurrentScreen: function (screenName, options) {\n      setCurrentScreen(wrappedGtagFunction, initializationPromisesMap[appId], screenName, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setUserId: function (id, options) {\n      setUserId(wrappedGtagFunction, initializationPromisesMap[appId], id, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setUserProperties: function (properties, options) {\n      setUserProperties(wrappedGtagFunction, initializationPromisesMap[appId], properties, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setAnalyticsCollectionEnabled: function (enabled) {\n      setAnalyticsCollectionEnabled(initializationPromisesMap[appId], enabled).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    INTERNAL: {\n      delete: function () {\n        delete initializationPromisesMap[appId];\n        return Promise.resolve();\n      }\n    }\n  };\n  return analyticsInstance;\n}\nvar name = \"@firebase/analytics\";\nvar version = \"0.6.18\";\n\n/**\r\n * Type constant for Firebase Analytics.\r\n */\nvar ANALYTICS_TYPE = 'analytics';\nfunction registerAnalytics(instance) {\n  instance.INTERNAL.registerComponent(new Component(ANALYTICS_TYPE, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var installations = container.getProvider('installations').getImmediate();\n    return factory(app, installations);\n  }, \"PUBLIC\" /* PUBLIC */).setServiceProps({\n    settings: settings,\n    EventName: EventName,\n    isSupported: isSupported\n  }));\n  instance.INTERNAL.registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\" /* PRIVATE */));\n  instance.registerVersion(name, version);\n  function internalFactory(container) {\n    try {\n      var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */, {\n        reason: e\n      });\n    }\n  }\n}\nregisterAnalytics(firebase);\n/**\r\n * this is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. check if it's not a browser extension environment.\r\n * 1. check if cookie is enabled in current browser.\r\n * 3. check if IndexedDB is supported by the browser environment.\r\n * 4. check if the current browser context is valid for using IndexedDB.\r\n *\r\n */\nfunction isSupported() {\n  return __awaiter(this, void 0, void 0, function () {\n    var isDBOpenable;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (isBrowserExtension()) {\n            return [2 /*return*/, false];\n          }\n          if (!areCookiesEnabled()) {\n            return [2 /*return*/, false];\n          }\n          if (!isIndexedDBAvailable()) {\n            return [2 /*return*/, false];\n          }\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, validateIndexedDBOpenable()];\n        case 2:\n          isDBOpenable = _a.sent();\n          return [2 /*return*/, isDBOpenable];\n        case 3:\n          _a.sent();\n          return [2 /*return*/, false];\n        case 4:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nexport { factory, getGlobalVars, registerAnalytics, resetGlobalVars, settings };","map":{"version":3,"names":["GA_FID_KEY","ORIGIN_KEY","FETCH_TIMEOUT_MILLIS","DYNAMIC_CONFIG_URL","GTAG_URL","GtagCommand","EventName","logEvent","gtagFunction","initializationPromise","eventName","eventParams","options","global","EVENT","measurementId","_a","sent","params","__assign","setCurrentScreen","screenName","SET","Promise","resolve","CONFIG","update","setUserId","id","setUserProperties","properties","flatProperties","_i","Object","keys","length","key","_b","setAnalyticsCollectionEnabled","enabled","window","logger","Logger","insertScriptTag","dataLayerName","script","document","createElement","src","async","head","appendChild","getOrCreateDataLayer","dataLayer","Array","isArray","gtagOnConfig","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","gtagParams","correspondingAppId","all","dynamicConfigResults","foundConfig","find","config","appId","error","e_1","gtagOnEvent","initializationPromisesToWaitFor","gaSendToList","sendToId","push","gaSendToList_1","values","e_2","wrapGtag","gtagWrapper","command","idOrNameOrParams","e_3","wrapOrCreateGtag","gtagFunctionName","_args","arguments","wrappedGtag","findGtagScriptOnPage","scriptTags","getElementsByTagName","tag","includes","ERRORS","ERROR_FACTORY","ErrorFactory","LONG_RETRY_FACTOR","BASE_INTERVAL_MILLIS","RetryData","throttleMetadata","intervalMillis","prototype","getThrottleMetadata","setThrottleMetadata","metadata","deleteThrottleMetadata","defaultRetryData","getHeaders","apiKey","Headers","Accept","fetchDynamicConfig","appFields","request","method","headers","appUrl","replace","fetch","response","status","errorMessage","json","jsonResponse","message","create","httpStatus","responseMessage","fetchDynamicConfigWithRetry","app","retryData","timeoutMillis","backoffCount","throttleEndTimeMillis","Date","now","signal","AnalyticsAbortSignal","setTimeout","__awaiter","_this","abort","undefined","attemptFetchDynamicConfigWithRetry","setAbortableTimeout","warn","isRetriableError","backoffMillis","Number","customData","calculateBackoffMillis","debug","reject","Math","max","timeout","addEventListener","clearTimeout","e","FirebaseError","listeners","listener","forEach","validateIndexedDB","isIndexedDBAvailable","errorInfo","validateIndexedDBOpenable","initializeIds","installations","dynamicConfigPromise","then","catch","fidPromise","envIsValid","getId","_c","dynamicConfig","fid","configProperties","gtagName","gtagCoreFunction","wrappedGtagFunction","globalInitDone","resetGlobalVars","newGlobalInitDone","newInitializationPromisesMap","newDynamicPromises","getGlobalVars","settings","warnOnBrowserContextMismatch","mismatchedEnvMessages","isBrowserExtension","areCookiesEnabled","details","map","index","join","err","factory","analyticsInstance","INTERNAL","delete","ANALYTICS_TYPE","registerAnalytics","instance","registerComponent","Component","container","getProvider","getImmediate","setServiceProps","isSupported","internalFactory","registerVersion","name","version","analytics","reason","firebase","isDBOpenable"],"sources":["/home/ngare/Projects/Lakucha/node_modules/@firebase/analytics/src/constants.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/analytics/src/functions.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/analytics/src/logger.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/analytics/src/helpers.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/analytics/src/errors.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/analytics/src/get-config.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/analytics/src/initialize-ids.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/analytics/src/factory.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/analytics/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config'\n}\n\n/**\n * Officially recommended event names for gtag.js\n * Any other string is also allowed.\n *\n * @public\n */\nexport enum EventName {\n  ADD_SHIPPING_INFO = 'add_shipping_info',\n  ADD_PAYMENT_INFO = 'add_payment_info',\n  ADD_TO_CART = 'add_to_cart',\n  ADD_TO_WISHLIST = 'add_to_wishlist',\n  BEGIN_CHECKOUT = 'begin_checkout',\n  /**\n   * @deprecated\n   * This event name is deprecated and is unsupported in updated\n   * Enhanced Ecommerce reports.\n   */\n  CHECKOUT_PROGRESS = 'checkout_progress',\n  EXCEPTION = 'exception',\n  GENERATE_LEAD = 'generate_lead',\n  LOGIN = 'login',\n  PAGE_VIEW = 'page_view',\n  PURCHASE = 'purchase',\n  REFUND = 'refund',\n  REMOVE_FROM_CART = 'remove_from_cart',\n  SCREEN_VIEW = 'screen_view',\n  SEARCH = 'search',\n  SELECT_CONTENT = 'select_content',\n  SELECT_ITEM = 'select_item',\n  SELECT_PROMOTION = 'select_promotion',\n  /** @deprecated */\n  SET_CHECKOUT_OPTION = 'set_checkout_option',\n  SHARE = 'share',\n  SIGN_UP = 'sign_up',\n  TIMING_COMPLETE = 'timing_complete',\n  VIEW_CART = 'view_cart',\n  VIEW_ITEM = 'view_item',\n  VIEW_ITEM_LIST = 'view_item_list',\n  VIEW_PROMOTION = 'view_promotion',\n  VIEW_SEARCH_RESULTS = 'view_search_results'\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport { GtagCommand } from './constants';\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DynamicConfig,\n  DataLayer,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(\n  dataLayerName: string,\n  measurementId: string\n): void {\n  const script = document.createElement('script');\n  script.src = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await Promise.all(dynamicConfigPromisesList);\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await Promise.all(dynamicConfigPromisesList);\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: ControlParams & EventParams & CustomParams\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else {\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns first script tag in DOM matching our gtag url pattern.\n */\nexport function findGtagScriptOnPage(): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError {\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId {$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: {\n    httpStatus: number;\n    responseMessage: string;\n  };\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: { errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  DynamicConfig,\n  ThrottleMetadata,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    if (!isRetriableError(e)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(e.customData.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DynamicConfig,\n  Gtag,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { findGtagScriptOnPage, insertScriptTag } from './helpers';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: e\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations FirebaseInstallations instance.\n *\n * @returns Measurement ID.\n */\nexport async function initializeIds(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: FirebaseInstallations,\n  gtagCore: Gtag,\n  dataLayerName: string\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // Detect if user has already put the gtag <script> tag on this page.\n  if (!findGtagScriptOnPage()) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  gtagCore('js' as any, new Date());\n\n  const configProperties: { [key: string]: string | boolean } = {\n    // guard against developers accidentally setting properties with prefix `firebase_`\n    [ORIGIN_KEY]: 'firebase',\n    update: true\n  };\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n  return dynamicConfig.measurementId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAnalytics,\n  Gtag,\n  SettingsOptions,\n  DynamicConfig,\n  MinimalDynamicConfig,\n  AnalyticsCallOptions,\n  CustomParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport {\n  logEvent,\n  setCurrentScreen,\n  setUserId,\n  setUserProperties,\n  setAnalyticsCollectionEnabled\n} from './functions';\nimport { getOrCreateDataLayer, wrapOrCreateGtag } from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { initializeIds } from './initialize-ids';\nimport { logger } from './logger';\nimport { FirebaseService } from '@firebase/app-types/private';\n\ninterface FirebaseAnalyticsInternal\n  extends FirebaseAnalytics,\n    FirebaseService {}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nlet initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<\n  Promise<DynamicConfig | MinimalDynamicConfig>\n> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nlet wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * This must be run before calling firebase.analytics() or it won't\n * have any effect.\n * @param options Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  installations: FirebaseInstallations\n): FirebaseAnalytics {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = initializeIds(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction,\n    dataLayerName\n  );\n\n  const analyticsInstance: FirebaseAnalyticsInternal = {\n    app,\n    // Public methods return void for API simplicity and to better match gtag,\n    // while internal implementations return promises.\n    logEvent: (\n      eventName: string,\n      eventParams?: EventParams | CustomParams,\n      options?: AnalyticsCallOptions\n    ) => {\n      logEvent(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        eventName,\n        eventParams,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setCurrentScreen: (screenName, options) => {\n      setCurrentScreen(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        screenName,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setUserId: (id, options) => {\n      setUserId(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        id,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setUserProperties: (properties, options) => {\n      setUserProperties(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        properties,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setAnalyticsCollectionEnabled: enabled => {\n      setAnalyticsCollectionEnabled(\n        initializationPromisesMap[appId],\n        enabled\n      ).catch(e => logger.error(e));\n    },\n    INTERNAL: {\n      delete: (): Promise<void> => {\n        delete initializationPromisesMap[appId];\n        return Promise.resolve();\n      }\n    }\n  };\n\n  return analyticsInstance;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { FirebaseAnalytics } from '@firebase/analytics-types';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  factory,\n  settings,\n  resetGlobalVars,\n  getGlobalVars\n} from './src/factory';\nimport { EventName } from './src/constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './src/errors';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension\n} from '@firebase/util';\nimport { name, version } from './package.json';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\n/**\n * Type constant for Firebase Analytics.\n */\nconst ANALYTICS_TYPE = 'analytics';\n\nexport function registerAnalytics(instance: _FirebaseNamespace): void {\n  instance.INTERNAL.registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations')\n          .getImmediate();\n\n        return factory(app, installations);\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({\n      settings,\n      EventName,\n      isSupported\n    })\n  );\n\n  instance.INTERNAL.registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  instance.registerVersion(name, version);\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e\n      });\n    }\n  }\n}\n\nexport { factory, settings, resetGlobalVars, getGlobalVars };\n\nregisterAnalytics(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior of `registerAnalytics`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    analytics(app?: FirebaseApp): FirebaseAnalytics;\n  }\n  interface FirebaseApp {\n    analytics(): FirebaseAnalytics;\n  }\n}\n\n/**\n * this is a public static method provided to users that wraps four different checks:\n *\n * 1. check if it's not a browser extension environment.\n * 1. check if cookie is enabled in current browser.\n * 3. check if IndexedDB is supported by the browser environment.\n * 4. check if the current browser context is valid for using IndexedDB.\n *\n */\nasync function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}