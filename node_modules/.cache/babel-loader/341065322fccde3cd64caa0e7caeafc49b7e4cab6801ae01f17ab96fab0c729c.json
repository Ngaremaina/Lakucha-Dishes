{"ast":null,"code":"import firebase from '@firebase/app';\nimport { __extends, __awaiter, __generator } from 'tslib';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Standard error codes for different ways a request can fail, as defined by:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * This map is used primarily to convert from a backend error code string to\r\n * a client SDK error code string, and make sure it's in the supported set.\r\n */\nvar errorCodeMap = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n/**\r\n * An explicit error that can be thrown from a handler to send an error to the\r\n * client that called the function.\r\n */\nvar HttpsErrorImpl = /** @class */function (_super) {\n  __extends(HttpsErrorImpl, _super);\n  function HttpsErrorImpl(code, message, details) {\n    var _this = _super.call(this, message) || this;\n    // This is a workaround for a bug in TypeScript when extending Error:\n    // tslint:disable-next-line\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(_this, HttpsErrorImpl.prototype);\n    _this.code = code;\n    _this.details = details;\n    return _this;\n  }\n  return HttpsErrorImpl;\n}(Error);\n/**\r\n * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n * This is the standard HTTP status code -> error mapping defined in:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * @param status An HTTP status code.\r\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n */\nfunction codeForHTTPStatus(status) {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n  }\n  return 'unknown';\n}\n/**\r\n * Takes an HTTP response and returns the corresponding Error, if any.\r\n */\nfunction _errorForResponse(status, bodyJSON, serializer) {\n  var code = codeForHTTPStatus(status);\n  // Start with reasonable defaults from the status code.\n  var description = code;\n  var details = undefined;\n  // Then look through the body for explicit details.\n  try {\n    var errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      var status_1 = errorJSON.status;\n      if (typeof status_1 === 'string') {\n        if (!errorCodeMap[status_1]) {\n          // They must've included an unknown error code in the body.\n          return new HttpsErrorImpl('internal', 'internal');\n        }\n        code = errorCodeMap[status_1];\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status_1;\n      }\n      var message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = serializer.decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n  return new HttpsErrorImpl(code, description, details);\n}\n\n/**\r\n * Helper class to get metadata that should be included with a function call.\r\n */\nvar ContextProvider = /** @class */function () {\n  function ContextProvider(authProvider, messagingProvider) {\n    var _this = this;\n    this.auth = null;\n    this.messaging = null;\n    this.auth = authProvider.getImmediate({\n      optional: true\n    });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n    if (!this.auth) {\n      authProvider.get().then(function (auth) {\n        return _this.auth = auth;\n      }, function () {\n        /* get() never rejects */\n      });\n    }\n    if (!this.messaging) {\n      messagingProvider.get().then(function (messaging) {\n        return _this.messaging = messaging;\n      }, function () {\n        /* get() never rejects */\n      });\n    }\n  }\n  ContextProvider.prototype.getAuthToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var token;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.auth) {\n              return [2 /*return*/, undefined];\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.auth.getToken()];\n          case 2:\n            token = _a.sent();\n            if (!token) {\n              return [2 /*return*/, undefined];\n            }\n            return [2 /*return*/, token.accessToken];\n          case 3:\n            _a.sent();\n            // If there's any error when trying to get the auth token, leave it off.\n            return [2 /*return*/, undefined];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  ContextProvider.prototype.getInstanceIdToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.messaging || !('Notification' in self) || Notification.permission !== 'granted') {\n              return [2 /*return*/, undefined];\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.messaging.getToken()];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n          case 3:\n            _a.sent();\n            // We don't warn on this, because it usually means messaging isn't set up.\n            // console.warn('Failed to retrieve instance id token.', e);\n            // If there's any error when trying to get the token, leave it off.\n            return [2 /*return*/, undefined];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  ContextProvider.prototype.getContext = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var authToken, instanceIdToken;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getAuthToken()];\n          case 1:\n            authToken = _a.sent();\n            return [4 /*yield*/, this.getInstanceIdToken()];\n          case 2:\n            instanceIdToken = _a.sent();\n            return [2 /*return*/, {\n              authToken: authToken,\n              instanceIdToken: instanceIdToken\n            }];\n        }\n      });\n    });\n  };\n  return ContextProvider;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nvar UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\nfunction mapValues(\n// { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no, f) {\n  var result = {};\n  for (var key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\nvar Serializer = /** @class */function () {\n  function Serializer() {}\n  // Takes data and encodes it in a JSON-friendly way, such that types such as\n  // Date are preserved.\n  Serializer.prototype.encode = function (data) {\n    var _this = this;\n    if (data == null) {\n      return null;\n    }\n    if (data instanceof Number) {\n      data = data.valueOf();\n    }\n    if (typeof data === 'number' && isFinite(data)) {\n      // Any number in JS is safe to put directly in JSON and parse as a double\n      // without any loss of precision.\n      return data;\n    }\n    if (data === true || data === false) {\n      return data;\n    }\n    if (Object.prototype.toString.call(data) === '[object String]') {\n      return data;\n    }\n    if (data instanceof Date) {\n      return data.toISOString();\n    }\n    if (Array.isArray(data)) {\n      return data.map(function (x) {\n        return _this.encode(x);\n      });\n    }\n    if (typeof data === 'function' || typeof data === 'object') {\n      return mapValues(data, function (x) {\n        return _this.encode(x);\n      });\n    }\n    // If we got this far, the data is not encodable.\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n  };\n  // Takes data that's been encoded in a JSON-friendly form and returns a form\n  // with richer datatypes, such as Dates, etc.\n  Serializer.prototype.decode = function (json) {\n    var _this = this;\n    if (json == null) {\n      return json;\n    }\n    if (json['@type']) {\n      switch (json['@type']) {\n        case LONG_TYPE:\n        // Fall through and handle this the same as unsigned.\n        case UNSIGNED_LONG_TYPE:\n          {\n            // Technically, this could work return a valid number for malformed\n            // data if there was a number followed by garbage. But it's just not\n            // worth all the extra code to detect that case.\n            var value = Number(json['value']);\n            if (isNaN(value)) {\n              throw new Error('Data cannot be decoded from JSON: ' + json);\n            }\n            return value;\n          }\n        default:\n          {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n      }\n    }\n    if (Array.isArray(json)) {\n      return json.map(function (x) {\n        return _this.decode(x);\n      });\n    }\n    if (typeof json === 'function' || typeof json === 'object') {\n      return mapValues(json, function (x) {\n        return _this.decode(x);\n      });\n    }\n    // Anything else is safe to return.\n    return json;\n  };\n  return Serializer;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a Promise that will be rejected after the given duration.\r\n * The error will be of type HttpsErrorImpl.\r\n *\r\n * @param millis Number of milliseconds to wait before rejecting.\r\n */\nfunction failAfter(millis) {\n  var timer;\n  var promise = new Promise(function (_, reject) {\n    timer = setTimeout(function () {\n      reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n  return {\n    timer: timer,\n    promise: promise\n  };\n}\n/**\r\n * The main class for the Firebase Functions SDK.\r\n */\nvar Service = /** @class */function () {\n  /**\r\n   * Creates a new Functions service for the given app and (optional) region or custom domain.\r\n   * @param app_ The FirebaseApp to use.\r\n   * @param regionOrCustomDomain_ one of:\r\n   *   a) A region to call functions from, such as us-central1\r\n   *   b) A custom domain to use as a functions prefix, such as https://mydomain.com\r\n   */\n  function Service(app_, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain_, fetchImpl) {\n    var _this = this;\n    if (regionOrCustomDomain_ === void 0) {\n      regionOrCustomDomain_ = 'us-central1';\n    }\n    this.app_ = app_;\n    this.appCheckProvider = appCheckProvider;\n    this.fetchImpl = fetchImpl;\n    this.serializer = new Serializer();\n    this.emulatorOrigin = null;\n    this.INTERNAL = {\n      delete: function () {\n        return Promise.resolve(_this.deleteService());\n      }\n    };\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider);\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(function (resolve) {\n      _this.deleteService = function () {\n        return resolve();\n      };\n    });\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      var url = new URL(regionOrCustomDomain_);\n      this.customDomain = url.origin;\n      this.region = 'us-central1';\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain_;\n    }\n  }\n  Object.defineProperty(Service.prototype, \"app\", {\n    get: function () {\n      return this.app_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the URL for a callable with the given name.\r\n   * @param name The name of the callable.\r\n   */\n  Service.prototype._url = function (name) {\n    var projectId = this.app_.options.projectId;\n    if (this.emulatorOrigin !== null) {\n      var origin_1 = this.emulatorOrigin;\n      return origin_1 + \"/\" + projectId + \"/\" + this.region + \"/\" + name;\n    }\n    if (this.customDomain !== null) {\n      return this.customDomain + \"/\" + name;\n    }\n    return \"https://\" + this.region + \"-\" + projectId + \".cloudfunctions.net/\" + name;\n  };\n  /**\r\n   * Modify this instance to communicate with the Cloud Functions emulator.\r\n   *\r\n   * Note: this must be called before this instance has been used to do any operations.\r\n   *\r\n   * @param host The emulator host (ex: localhost)\r\n   * @param port The emulator port (ex: 5001)\r\n   */\n  Service.prototype.useEmulator = function (host, port) {\n    this.emulatorOrigin = \"http://\" + host + \":\" + port;\n  };\n  /**\r\n   * Changes this instance to point to a Cloud Functions emulator running\r\n   * locally. See https://firebase.google.com/docs/functions/local-emulator\r\n   *\r\n   * @deprecated Prefer the useEmulator(host, port) method.\r\n   * @param origin The origin of the local emulator, such as\r\n   * \"http://localhost:5005\".\r\n   */\n  Service.prototype.useFunctionsEmulator = function (origin) {\n    this.emulatorOrigin = origin;\n  };\n  /**\r\n   * Returns a reference to the callable https trigger with the given name.\r\n   * @param name The name of the trigger.\r\n   */\n  Service.prototype.httpsCallable = function (name, options) {\n    var _this = this;\n    return function (data) {\n      return _this.call(name, data, options || {});\n    };\n  };\n  /**\r\n   * Does an HTTP POST and returns the completed response.\r\n   * @param url The url to post to.\r\n   * @param body The JSON body of the post.\r\n   * @param headers The HTTP headers to include in the request.\r\n   * @return A Promise that will succeed when the request finishes.\r\n   */\n  Service.prototype.postJSON = function (url, body, headers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var appCheckToken, response, json;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            headers['Content-Type'] = 'application/json';\n            return [4 /*yield*/, this.getAppCheckToken()];\n          case 1:\n            appCheckToken = _a.sent();\n            if (appCheckToken !== null) {\n              headers['X-Firebase-AppCheck'] = appCheckToken;\n            }\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, this.fetchImpl(url, {\n              method: 'POST',\n              body: JSON.stringify(body),\n              headers: headers\n            })];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            _a.sent();\n            // This could be an unhandled error on the backend, or it could be a\n            // network error. There's no way to know, since an unhandled error on the\n            // backend will fail to set the proper CORS header, and thus will be\n            // treated as a network error by fetch.\n            return [2 /*return*/, {\n              status: 0,\n              json: null\n            }];\n          case 5:\n            json = null;\n            _a.label = 6;\n          case 6:\n            _a.trys.push([6, 8,, 9]);\n            return [4 /*yield*/, response.json()];\n          case 7:\n            json = _a.sent();\n            return [3 /*break*/, 9];\n          case 8:\n            _a.sent();\n            return [3 /*break*/, 9];\n          case 9:\n            return [2 /*return*/, {\n              status: response.status,\n              json: json\n            }];\n        }\n      });\n    });\n  };\n  Service.prototype.getAppCheckToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var appCheck, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            appCheck = this.appCheckProvider.getImmediate({\n              optional: true\n            });\n            if (!appCheck) return [3 /*break*/, 2];\n            return [4 /*yield*/, appCheck.getToken()];\n          case 1:\n            result = _a.sent();\n            // If getToken() fails, it will still return a dummy token that also has\n            // an error field containing the error message. We will send any token\n            // provided here and show an error if/when it is rejected by the functions\n            // endpoint.\n            return [2 /*return*/, result.token];\n          case 2:\n            return [2 /*return*/, null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Calls a callable function asynchronously and returns the result.\r\n   * @param name The name of the callable trigger.\r\n   * @param data The data to pass as params to the function.s\r\n   */\n  Service.prototype.call = function (name, data, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var url, body, headers, context, timeout, _a, timer, failAfterPromise, response, error, responseData, decodedData;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            url = this._url(name);\n            // Encode any special types, such as dates, in the input data.\n            data = this.serializer.encode(data);\n            body = {\n              data: data\n            };\n            headers = {};\n            return [4 /*yield*/, this.contextProvider.getContext()];\n          case 1:\n            context = _b.sent();\n            if (context.authToken) {\n              headers['Authorization'] = 'Bearer ' + context.authToken;\n            }\n            if (context.instanceIdToken) {\n              headers['Firebase-Instance-ID-Token'] = context.instanceIdToken;\n            }\n            timeout = options.timeout || 70000;\n            _a = failAfter(timeout), timer = _a.timer, failAfterPromise = _a.promise;\n            return [4 /*yield*/, Promise.race([clearTimeoutWrapper(timer, this.postJSON(url, body, headers)), failAfterPromise, clearTimeoutWrapper(timer, this.cancelAllRequests)])];\n          case 2:\n            response = _b.sent();\n            // If service was deleted, interrupted response throws an error.\n            if (!response) {\n              throw new HttpsErrorImpl('cancelled', 'Firebase Functions instance was deleted.');\n            }\n            error = _errorForResponse(response.status, response.json, this.serializer);\n            if (error) {\n              throw error;\n            }\n            if (!response.json) {\n              throw new HttpsErrorImpl('internal', 'Response is not valid JSON object.');\n            }\n            responseData = response.json.data;\n            // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n            // backwards compatibility.\n            if (typeof responseData === 'undefined') {\n              responseData = response.json.result;\n            }\n            if (typeof responseData === 'undefined') {\n              // Consider the response malformed.\n              throw new HttpsErrorImpl('internal', 'Response is missing data field.');\n            }\n            decodedData = this.serializer.decode(responseData);\n            return [2 /*return*/, {\n              data: decodedData\n            }];\n        }\n      });\n    });\n  };\n  return Service;\n}();\nfunction clearTimeoutWrapper(timer, promise) {\n  return __awaiter(this, void 0, void 0, function () {\n    var result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, promise];\n        case 1:\n          result = _a.sent();\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          clearTimeout(timer);\n          return [2 /*return*/, result];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Functions.\r\n */\nvar FUNCTIONS_TYPE = 'functions';\nfunction registerFunctions(instance, fetchImpl) {\n  var namespaceExports = {\n    // no-inline\n    Functions: Service\n  };\n  function factory(container, _a) {\n    var regionOrCustomDomain = _a.instanceIdentifier;\n    // Dependencies\n    var app = container.getProvider('app').getImmediate();\n    var authProvider = container.getProvider('auth-internal');\n    var appCheckProvider = container.getProvider('app-check-internal');\n    var messagingProvider = container.getProvider('messaging');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new Service(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain, fetchImpl);\n  }\n  instance.INTERNAL.registerComponent(new Component(FUNCTIONS_TYPE, factory, \"PUBLIC\" /* PUBLIC */).setServiceProps(namespaceExports).setMultipleInstances(true));\n}\nvar name = \"@firebase/functions\";\nvar version = \"0.6.16\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nregisterFunctions(firebase, fetch.bind(self));\nfirebase.registerVersion(name, version);","map":{"version":3,"names":["errorCodeMap","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","HttpsErrorImpl","_super","__extends","code","message","details","_this","call","Object","setPrototypeOf","prototype","Error","codeForHTTPStatus","status","_errorForResponse","bodyJSON","serializer","description","undefined","errorJSON","error","status_1","decode","e","ContextProvider","authProvider","messagingProvider","auth","messaging","getImmediate","optional","get","then","getAuthToken","getToken","token","_a","sent","accessToken","getInstanceIdToken","self","Notification","permission","getContext","authToken","instanceIdToken","LONG_TYPE","UNSIGNED_LONG_TYPE","mapValues","o","f","result","key","hasOwnProperty","Serializer","encode","data","Number","valueOf","isFinite","toString","Date","toISOString","Array","isArray","map","x","json","value","isNaN","failAfter","millis","timer","promise","Promise","_","reject","setTimeout","Service","app_","appCheckProvider","regionOrCustomDomain_","fetchImpl","emulatorOrigin","delete","resolve","deleteService","contextProvider","cancelAllRequests","url","URL","customDomain","origin","region","defineProperty","_url","name","projectId","options","origin_1","useEmulator","host","port","useFunctionsEmulator","httpsCallable","postJSON","body","headers","getAppCheckToken","appCheckToken","method","JSON","stringify","response","appCheck","context","_b","timeout","failAfterPromise","race","clearTimeoutWrapper","responseData","decodedData","clearTimeout","FUNCTIONS_TYPE","registerFunctions","instance","namespaceExports","Functions","factory","container","regionOrCustomDomain","instanceIdentifier","app","getProvider","registerComponent","Component","setServiceProps","setMultipleInstances","firebase","fetch","bind","registerVersion","version"],"sources":["/home/ngare/Projects/Lakucha/node_modules/@firebase/functions/src/api/error.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/functions/src/context.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/functions/src/serializer.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/functions/src/api/service.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/functions/src/config.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/functions/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HttpsError, FunctionsErrorCode } from '@firebase/functions-types';\nimport { Serializer } from '../serializer';\nimport { HttpResponseBody } from './service';\n\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap: { [name: string]: FunctionsErrorCode } = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\nexport class HttpsErrorImpl extends Error implements HttpsError {\n  /**\n   * A standard error code that will be returned to the client. This also\n   * determines the HTTP status code of the response, as defined in code.proto.\n   */\n  readonly code: FunctionsErrorCode;\n\n  /**\n   * Extra data to be converted to JSON and included in the error response.\n   */\n  readonly details?: unknown;\n\n  constructor(code: FunctionsErrorCode, message?: string, details?: unknown) {\n    super(message);\n\n    // This is a workaround for a bug in TypeScript when extending Error:\n    // tslint:disable-next-line\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, HttpsErrorImpl.prototype);\n\n    this.code = code;\n    this.details = details;\n  }\n}\n\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status: number): FunctionsErrorCode {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n    default: // ignore\n  }\n  return 'unknown';\n}\n\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nexport function _errorForResponse(\n  status: number,\n  bodyJSON: HttpResponseBody | null,\n  serializer: Serializer\n): Error | null {\n  let code = codeForHTTPStatus(status);\n\n  // Start with reasonable defaults from the status code.\n  let description: string = code;\n\n  let details: unknown = undefined;\n\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new HttpsErrorImpl('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status;\n      }\n\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = serializer.decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new HttpsErrorImpl(code, description, details);\n}\n","import {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  FirebaseMessaging,\n  FirebaseMessagingName\n} from '@firebase/messaging-types';\n\nimport { Provider } from '@firebase/component';\n\n/**\n * The metadata that should be supplied with function calls.\n */\nexport interface Context {\n  authToken?: string;\n  instanceIdToken?: string;\n}\n\n/**\n * Helper class to get metadata that should be included with a function call.\n */\nexport class ContextProvider {\n  private auth: FirebaseAuthInternal | null = null;\n  private messaging: FirebaseMessaging | null = null;\n  constructor(\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>\n  ) {\n    this.auth = authProvider.getImmediate({ optional: true });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(\n        auth => (this.auth = auth),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(\n        messaging => (this.messaging = messaging),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n  }\n\n  async getAuthToken(): Promise<string | undefined> {\n    if (!this.auth) {\n      return undefined;\n    }\n\n    try {\n      const token = await this.auth.getToken();\n      if (!token) {\n        return undefined;\n      }\n      return token.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getInstanceIdToken(): Promise<string | undefined> {\n    if (\n      !this.messaging ||\n      !('Notification' in self) ||\n      Notification.permission !== 'granted'\n    ) {\n      return undefined;\n    }\n\n    try {\n      return await this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getContext(): Promise<Context> {\n    const authToken = await this.getAuthToken();\n    const instanceIdToken = await this.getInstanceIdToken();\n    return { authToken, instanceIdToken };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues(\n  // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  o: { [key: string]: any },\n  f: (arg0: unknown) => unknown\n): object {\n  const result: { [key: string]: unknown } = {};\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n\nexport class Serializer {\n  // Takes data and encodes it in a JSON-friendly way, such that types such as\n  // Date are preserved.\n  encode(data: unknown): unknown {\n    if (data == null) {\n      return null;\n    }\n    if (data instanceof Number) {\n      data = data.valueOf();\n    }\n    if (typeof data === 'number' && isFinite(data)) {\n      // Any number in JS is safe to put directly in JSON and parse as a double\n      // without any loss of precision.\n      return data;\n    }\n    if (data === true || data === false) {\n      return data;\n    }\n    if (Object.prototype.toString.call(data) === '[object String]') {\n      return data;\n    }\n    if (data instanceof Date) {\n      return data.toISOString();\n    }\n    if (Array.isArray(data)) {\n      return data.map(x => this.encode(x));\n    }\n    if (typeof data === 'function' || typeof data === 'object') {\n      return mapValues(data!, x => this.encode(x));\n    }\n    // If we got this far, the data is not encodable.\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n  }\n\n  // Takes data that's been encoded in a JSON-friendly form and returns a form\n  // with richer datatypes, such as Dates, etc.\n  decode(json: unknown): unknown {\n    if (json == null) {\n      return json;\n    }\n    if ((json as { [key: string]: unknown })['@type']) {\n      switch ((json as { [key: string]: unknown })['@type']) {\n        case LONG_TYPE:\n        // Fall through and handle this the same as unsigned.\n        case UNSIGNED_LONG_TYPE: {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          const value = Number((json as { [key: string]: unknown })['value']);\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n          return value;\n        }\n        default: {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n      }\n    }\n    if (Array.isArray(json)) {\n      return json.map(x => this.decode(x));\n    }\n    if (typeof json === 'function' || typeof json === 'object') {\n      return mapValues(json!, x => this.decode(x));\n    }\n    // Anything else is safe to return.\n    return json;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport {\n  FirebaseFunctions,\n  HttpsCallable,\n  HttpsCallableResult,\n  HttpsCallableOptions\n} from '@firebase/functions-types';\nimport { _errorForResponse, HttpsErrorImpl } from './error';\nimport { ContextProvider } from '../context';\nimport { Serializer } from '../serializer';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { FirebaseMessagingName } from '@firebase/messaging-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n\n/**\n * The response to an http request.\n */\ninterface HttpResponse {\n  status: number;\n  json: HttpResponseBody | null;\n}\n/**\n * Describes the shape of the HttpResponse body.\n * It makes functions that would otherwise take {} able to access the\n * possible elements in the body more easily\n */\nexport interface HttpResponseBody {\n  data?: unknown;\n  result?: unknown;\n  error?: {\n    message?: unknown;\n    status?: unknown;\n    details?: unknown;\n  };\n}\n\n/**\n * Returns a Promise that will be rejected after the given duration.\n * The error will be of type HttpsErrorImpl.\n *\n * @param millis Number of milliseconds to wait before rejecting.\n */\nfunction failAfter(\n  millis: number\n): {\n  timer: number | NodeJS.Timeout;\n  promise: Promise<never>;\n} {\n  let timer!: number | NodeJS.Timeout;\n  const promise = new Promise<never>((_, reject) => {\n    timer = setTimeout(() => {\n      reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n\n  return {\n    timer,\n    promise\n  };\n}\n\n/**\n * The main class for the Firebase Functions SDK.\n */\nexport class Service implements FirebaseFunctions, FirebaseService {\n  private readonly contextProvider: ContextProvider;\n  private readonly serializer = new Serializer();\n  private emulatorOrigin: string | null = null;\n  private cancelAllRequests: Promise<void>;\n  private deleteService!: () => void;\n  private region: string;\n  private customDomain: string | null;\n\n  /**\n   * Creates a new Functions service for the given app and (optional) region or custom domain.\n   * @param app_ The FirebaseApp to use.\n   * @param regionOrCustomDomain_ one of:\n   *   a) A region to call functions from, such as us-central1\n   *   b) A custom domain to use as a functions prefix, such as https://mydomain.com\n   */\n  constructor(\n    private app_: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>,\n    private appCheckProvider: Provider<AppCheckInternalComponentName>,\n    regionOrCustomDomain_: string = 'us-central1',\n    readonly fetchImpl: typeof fetch\n  ) {\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider);\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return resolve();\n      };\n    });\n\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      const url = new URL(regionOrCustomDomain_);\n      this.customDomain = url.origin;\n      this.region = 'us-central1';\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain_;\n    }\n  }\n\n  get app(): FirebaseApp {\n    return this.app_;\n  }\n\n  INTERNAL = {\n    delete: (): Promise<void> => {\n      return Promise.resolve(this.deleteService());\n    }\n  };\n\n  /**\n   * Returns the URL for a callable with the given name.\n   * @param name The name of the callable.\n   */\n  _url(name: string): string {\n    const projectId = this.app_.options.projectId;\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n\n  /**\n   * Modify this instance to communicate with the Cloud Functions emulator.\n   *\n   * Note: this must be called before this instance has been used to do any operations.\n   *\n   * @param host The emulator host (ex: localhost)\n   * @param port The emulator port (ex: 5001)\n   */\n  useEmulator(host: string, port: number): void {\n    this.emulatorOrigin = `http://${host}:${port}`;\n  }\n\n  /**\n   * Changes this instance to point to a Cloud Functions emulator running\n   * locally. See https://firebase.google.com/docs/functions/local-emulator\n   *\n   * @deprecated Prefer the useEmulator(host, port) method.\n   * @param origin The origin of the local emulator, such as\n   * \"http://localhost:5005\".\n   */\n  useFunctionsEmulator(origin: string): void {\n    this.emulatorOrigin = origin;\n  }\n\n  /**\n   * Returns a reference to the callable https trigger with the given name.\n   * @param name The name of the trigger.\n   */\n  httpsCallable(name: string, options?: HttpsCallableOptions): HttpsCallable {\n    return data => {\n      return this.call(name, data, options || {});\n    };\n  }\n\n  /**\n   * Does an HTTP POST and returns the completed response.\n   * @param url The url to post to.\n   * @param body The JSON body of the post.\n   * @param headers The HTTP headers to include in the request.\n   * @return A Promise that will succeed when the request finishes.\n   */\n  private async postJSON(\n    url: string,\n    body: {},\n    headers: { [key: string]: string }\n  ): Promise<HttpResponse> {\n    headers['Content-Type'] = 'application/json';\n\n    const appCheckToken = await this.getAppCheckToken();\n    if (appCheckToken !== null) {\n      headers['X-Firebase-AppCheck'] = appCheckToken;\n    }\n\n    let response: Response;\n    try {\n      response = await this.fetchImpl(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers\n      });\n    } catch (e) {\n      // This could be an unhandled error on the backend, or it could be a\n      // network error. There's no way to know, since an unhandled error on the\n      // backend will fail to set the proper CORS header, and thus will be\n      // treated as a network error by fetch.\n      return {\n        status: 0,\n        json: null\n      };\n    }\n    let json: HttpResponseBody | null = null;\n    try {\n      json = await response.json();\n    } catch (e) {\n      // If we fail to parse JSON, it will fail the same as an empty body.\n    }\n    return {\n      status: response.status,\n      json\n    };\n  }\n\n  private async getAppCheckToken(): Promise<string | null> {\n    const appCheck = this.appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // If getToken() fails, it will still return a dummy token that also has\n      // an error field containing the error message. We will send any token\n      // provided here and show an error if/when it is rejected by the functions\n      // endpoint.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Calls a callable function asynchronously and returns the result.\n   * @param name The name of the callable trigger.\n   * @param data The data to pass as params to the function.s\n   */\n  private async call(\n    name: string,\n    data: unknown,\n    options: HttpsCallableOptions\n  ): Promise<HttpsCallableResult> {\n    const url = this._url(name);\n\n    // Encode any special types, such as dates, in the input data.\n    data = this.serializer.encode(data);\n    const body = { data };\n\n    // Add a header for the authToken.\n    const headers: { [key: string]: string } = {};\n    const context = await this.contextProvider.getContext();\n    if (context.authToken) {\n      headers['Authorization'] = 'Bearer ' + context.authToken;\n    }\n    if (context.instanceIdToken) {\n      headers['Firebase-Instance-ID-Token'] = context.instanceIdToken;\n    }\n\n    // Default timeout to 70s, but let the options override it.\n    const timeout = options.timeout || 70000;\n\n    const { timer, promise: failAfterPromise } = failAfter(timeout);\n\n    const response = await Promise.race([\n      clearTimeoutWrapper(timer, this.postJSON(url, body, headers)),\n      failAfterPromise,\n      clearTimeoutWrapper(timer, this.cancelAllRequests)\n    ]);\n\n    // If service was deleted, interrupted response throws an error.\n    if (!response) {\n      throw new HttpsErrorImpl(\n        'cancelled',\n        'Firebase Functions instance was deleted.'\n      );\n    }\n\n    // Check for an error status, regardless of http status.\n    const error = _errorForResponse(\n      response.status,\n      response.json,\n      this.serializer\n    );\n    if (error) {\n      throw error;\n    }\n\n    if (!response.json) {\n      throw new HttpsErrorImpl(\n        'internal',\n        'Response is not valid JSON object.'\n      );\n    }\n\n    let responseData = response.json.data;\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n    // backwards compatibility.\n    if (typeof responseData === 'undefined') {\n      responseData = response.json.result;\n    }\n    if (typeof responseData === 'undefined') {\n      // Consider the response malformed.\n      throw new HttpsErrorImpl('internal', 'Response is missing data field.');\n    }\n\n    // Decode any special types, such as dates, in the returned data.\n    const decodedData = this.serializer.decode(responseData);\n\n    return { data: decodedData };\n  }\n}\n\nasync function clearTimeoutWrapper<T>(\n  timer: number | NodeJS.Timeout,\n  promise: Promise<T>\n): Promise<T> {\n  const result = await promise;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  clearTimeout(timer as any);\n  return result;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Service } from './api/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\n\n/**\n * Type constant for Firebase Functions.\n */\nconst FUNCTIONS_TYPE = 'functions';\n\nexport function registerFunctions(\n  instance: _FirebaseNamespace,\n  fetchImpl: typeof fetch\n): void {\n  const namespaceExports = {\n    // no-inline\n    Functions: Service\n  };\n\n  function factory(\n    container: ComponentContainer,\n    { instanceIdentifier: regionOrCustomDomain }: InstanceFactoryOptions\n  ): Service {\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const appCheckProvider = container.getProvider('app-check-internal');\n    const messagingProvider = container.getProvider('messaging');\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new Service(\n      app,\n      authProvider,\n      messagingProvider,\n      appCheckProvider,\n      regionOrCustomDomain,\n      fetchImpl\n    );\n  }\n  instance.INTERNAL.registerComponent(\n    new Component(FUNCTIONS_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport * as types from '@firebase/functions-types';\nimport { registerFunctions } from './src/config';\n\nimport { name, version } from './package.json';\n\nregisterFunctions(firebase as _FirebaseNamespace, fetch.bind(self));\nfirebase.registerVersion(name, version);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    functions?: {\n      (app?: FirebaseApp): types.FirebaseFunctions;\n      Functions: typeof types.FirebaseFunctions;\n    };\n  }\n  interface FirebaseApp {\n    functions?(regionOrCustomDomain?: string): types.FirebaseFunctions;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}