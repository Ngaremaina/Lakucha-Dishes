{"ast":null,"code":"'use strict';\n\nvar firebase = require('@firebase/app');\nvar component = require('@firebase/component');\nvar tslib = require('tslib');\nvar util = require('@firebase/util');\nvar logger$1 = require('@firebase/logger');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar firebase__default = /*#__PURE__*/_interopDefaultLegacy(firebase);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _a;\nvar ERRORS = (_a = {}, _a[\"already-activated\" /* ALREADY_ACTIVATED */] = 'You are trying to activate AppCheck for FirebaseApp {$appName}, ' + 'while it is already activated. ' + 'AppCheck can only be activated once.', _a[\"use-before-activation\" /* USE_BEFORE_ACTIVATION */] = 'AppCheck is being used before activate() is called for FirebaseApp {$appName}. ' + 'Please make sure you call activate() before instantiating other Firebase services.', _a[\"fetch-network-error\" /* FETCH_NETWORK_ERROR */] = 'Fetch failed to connect to a network. Check Internet connection. ' + 'Original error: {$originalErrorMessage}.', _a[\"fetch-parse-error\" /* FETCH_PARSE_ERROR */] = 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.', _a[\"fetch-status-error\" /* FETCH_STATUS_ERROR */] = 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.', _a[\"storage-open\" /* STORAGE_OPEN */] = 'Error thrown when opening storage. Original error: {$originalErrorMessage}.', _a[\"storage-get\" /* STORAGE_GET */] = 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.', _a[\"storage-set\" /* STORAGE_WRITE */] = 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.', _a[\"recaptcha-error\" /* RECAPTCHA_ERROR */] = 'ReCAPTCHA error.', _a);\nvar ERROR_FACTORY = new util.ErrorFactory('appCheck', 'AppCheck', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar APP_CHECK_STATES = new Map();\nvar DEFAULT_STATE = {\n  activated: false,\n  tokenObservers: []\n};\nvar DEBUG_STATE = {\n  enabled: false\n};\nfunction getState(app) {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\nfunction setState(app, state) {\n  APP_CHECK_STATES.set(app, state);\n}\nfunction getDebugState() {\n  return DEBUG_STATE;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1beta';\nvar EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nvar EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\nvar TOKEN_REFRESH_TIME = {\n  /**\r\n   * The offset time before token natural expiration to run the refresh.\r\n   * This is currently 5 minutes.\r\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\r\n   * This is the first retrial wait after an error. This is currently\r\n   * 30 seconds.\r\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\r\n   * This is the maximum retrial wait, currently 16 minutes.\r\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nvar Refresher = /** @class */function () {\n  function Refresher(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\n    this.operation = operation;\n    this.retryPolicy = retryPolicy;\n    this.getWaitDuration = getWaitDuration;\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n    this.pending = null;\n    this.nextErrorWaitInterval = lowerBound;\n    if (lowerBound > upperBound) {\n      throw new Error('Proactive refresh lower bound greater than upper bound!');\n    }\n  }\n  Refresher.prototype.start = function () {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(function () {\n      /* we don't care about the result */\n    });\n  };\n  Refresher.prototype.stop = function () {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  };\n  Refresher.prototype.isRunning = function () {\n    return !!this.pending;\n  };\n  Refresher.prototype.process = function (hasSucceeded) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var error_1;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.stop();\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 6,, 7]);\n            this.pending = new util.Deferred();\n            return [4 /*yield*/, sleep(this.getNextRun(hasSucceeded))];\n          case 2:\n            _a.sent();\n            // Why do we resolve a promise, then immediate wait for it?\n            // We do it to make the promise chain cancellable.\n            // We can call stop() which rejects the promise before the following line execute, which makes\n            // the code jump to the catch block.\n            // TODO: unit test this\n            this.pending.resolve();\n            return [4 /*yield*/, this.pending.promise];\n          case 3:\n            _a.sent();\n            this.pending = new util.Deferred();\n            return [4 /*yield*/, this.operation()];\n          case 4:\n            _a.sent();\n            this.pending.resolve();\n            return [4 /*yield*/, this.pending.promise];\n          case 5:\n            _a.sent();\n            this.process(true).catch(function () {\n              /* we don't care about the result */\n            });\n            return [3 /*break*/, 7];\n          case 6:\n            error_1 = _a.sent();\n            if (this.retryPolicy(error_1)) {\n              this.process(false).catch(function () {\n                /* we don't care about the result */\n              });\n            } else {\n              this.stop();\n            }\n            return [3 /*break*/, 7];\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  Refresher.prototype.getNextRun = function (hasSucceeded) {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      var currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  };\n  return Refresher;\n}();\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms);\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getRecaptcha() {\n  return self.grecaptcha;\n}\nfunction ensureActivated(app) {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(\"use-before-activation\" /* USE_BEFORE_ACTIVATION */, {\n      appName: app.name\n    });\n  }\n}\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n */\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n      v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\nfunction formatDummyToken(tokenErrorData) {\n  return util.base64.encodeString(JSON.stringify(tokenErrorData), /* webSafe= */false);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction exchangeToken(_a, platformLoggerProvider) {\n  var url = _a.url,\n    body = _a.body;\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var headers, platformLogger, options, response, originalError_1, responseBody, originalError_2, match, timeToLiveAsNumber, now;\n    return tslib.__generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          headers = {\n            'Content-Type': 'application/json'\n          };\n          platformLogger = platformLoggerProvider.getImmediate({\n            optional: true\n          });\n          if (platformLogger) {\n            headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n          }\n          options = {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers: headers\n          };\n          _b.label = 1;\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, fetch(url, options)];\n        case 2:\n          response = _b.sent();\n          return [3 /*break*/, 4];\n        case 3:\n          originalError_1 = _b.sent();\n          throw ERROR_FACTORY.create(\"fetch-network-error\" /* FETCH_NETWORK_ERROR */, {\n            originalErrorMessage: originalError_1.message\n          });\n        case 4:\n          if (response.status !== 200) {\n            throw ERROR_FACTORY.create(\"fetch-status-error\" /* FETCH_STATUS_ERROR */, {\n              httpStatus: response.status\n            });\n          }\n          _b.label = 5;\n        case 5:\n          _b.trys.push([5, 7,, 8]);\n          return [4 /*yield*/, response.json()];\n        case 6:\n          // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n          responseBody = _b.sent();\n          return [3 /*break*/, 8];\n        case 7:\n          originalError_2 = _b.sent();\n          throw ERROR_FACTORY.create(\"fetch-parse-error\" /* FETCH_PARSE_ERROR */, {\n            originalErrorMessage: originalError_2.message\n          });\n        case 8:\n          match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n          if (!match || !match[2] || isNaN(Number(match[1]))) {\n            throw ERROR_FACTORY.create(\"fetch-parse-error\" /* FETCH_PARSE_ERROR */, {\n              originalErrorMessage: \"ttl field (timeToLive) is not in standard Protobuf Duration \" + (\"format: \" + responseBody.ttl)\n            });\n          }\n          timeToLiveAsNumber = Number(match[1]) * 1000;\n          now = Date.now();\n          return [2 /*return*/, {\n            token: responseBody.attestationToken,\n            expireTimeMillis: now + timeToLiveAsNumber,\n            issuedAtTimeMillis: now\n          }];\n      }\n    });\n  });\n}\nfunction getExchangeRecaptchaTokenRequest(app, reCAPTCHAToken) {\n  var _a = app.options,\n    projectId = _a.projectId,\n    appId = _a.appId,\n    apiKey = _a.apiKey;\n  return {\n    url: BASE_ENDPOINT + \"/projects/\" + projectId + \"/apps/\" + appId + \":\" + EXCHANGE_RECAPTCHA_TOKEN_METHOD + \"?key=\" + apiKey,\n    body: {\n      // eslint-disable-next-line\n      recaptcha_token: reCAPTCHAToken\n    }\n  };\n}\nfunction getExchangeDebugTokenRequest(app, debugToken) {\n  var _a = app.options,\n    projectId = _a.projectId,\n    appId = _a.appId,\n    apiKey = _a.apiKey;\n  return {\n    url: BASE_ENDPOINT + \"/projects/\" + projectId + \"/apps/\" + appId + \":\" + EXCHANGE_DEBUG_TOKEN_METHOD + \"?key=\" + apiKey,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DB_NAME = 'firebase-app-check-database';\nvar DB_VERSION = 1;\nvar STORE_NAME = 'firebase-app-check-store';\nvar DEBUG_TOKEN_KEY = 'debug-token';\nvar dbPromise = null;\nfunction getDBPromise() {\n  if (dbPromise) {\n    return dbPromise;\n  }\n  dbPromise = new Promise(function (resolve, reject) {\n    try {\n      var request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = function (event) {\n        resolve(event.target.result);\n      };\n      request.onerror = function (event) {\n        var _a;\n        reject(ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\n          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n        }));\n      };\n      request.onupgradeneeded = function (event) {\n        var db = event.target.result;\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\n        originalErrorMessage: e.message\n      }));\n    }\n  });\n  return dbPromise;\n}\nfunction readTokenFromIndexedDB(app) {\n  return read(computeKey(app));\n}\nfunction writeTokenToIndexedDB(app, token) {\n  return write(computeKey(app), token);\n}\nfunction writeDebugTokenToIndexedDB(token) {\n  return write(DEBUG_TOKEN_KEY, token);\n}\nfunction readDebugTokenFromIndexedDB() {\n  return read(DEBUG_TOKEN_KEY);\n}\nfunction write(key, value) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var db, transaction, store, request;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, getDBPromise()];\n        case 1:\n          db = _a.sent();\n          transaction = db.transaction(STORE_NAME, 'readwrite');\n          store = transaction.objectStore(STORE_NAME);\n          request = store.put({\n            compositeKey: key,\n            value: value\n          });\n          return [2 /*return*/, new Promise(function (resolve, reject) {\n            request.onsuccess = function (_event) {\n              resolve();\n            };\n            transaction.onerror = function (event) {\n              var _a;\n              reject(ERROR_FACTORY.create(\"storage-set\" /* STORAGE_WRITE */, {\n                originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n              }));\n            };\n          })];\n      }\n    });\n  });\n}\nfunction read(key) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var db, transaction, store, request;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, getDBPromise()];\n        case 1:\n          db = _a.sent();\n          transaction = db.transaction(STORE_NAME, 'readonly');\n          store = transaction.objectStore(STORE_NAME);\n          request = store.get(key);\n          return [2 /*return*/, new Promise(function (resolve, reject) {\n            request.onsuccess = function (event) {\n              var result = event.target.result;\n              if (result) {\n                resolve(result.value);\n              } else {\n                resolve(undefined);\n              }\n            };\n            transaction.onerror = function (event) {\n              var _a;\n              reject(ERROR_FACTORY.create(\"storage-get\" /* STORAGE_GET */, {\n                originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n              }));\n            };\n          })];\n      }\n    });\n  });\n}\nfunction computeKey(app) {\n  return app.options.appId + \"-\" + app.name;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar logger = new logger$1.Logger('@firebase/app-check');\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\nfunction readTokenFromStorage(app) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var token, e_1;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!util.isIndexedDBAvailable()) return [3 /*break*/, 5];\n          token = undefined;\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, readTokenFromIndexedDB(app)];\n        case 2:\n          token = _a.sent();\n          return [3 /*break*/, 4];\n        case 3:\n          e_1 = _a.sent();\n          // swallow the error and return undefined\n          logger.warn(\"Failed to read token from indexeddb. Error: \" + e_1);\n          return [3 /*break*/, 4];\n        case 4:\n          return [2 /*return*/, token];\n        case 5:\n          return [2 /*return*/, undefined];\n      }\n    });\n  });\n}\n/**\r\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n */\nfunction writeTokenToStorage(app, token) {\n  if (util.isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(function (e) {\n      // swallow the error and resolve the promise\n      logger.warn(\"Failed to write token to indexeddb. Error: \" + e);\n    });\n  }\n  return Promise.resolve();\n}\nfunction readOrCreateDebugTokenFromStorage() {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var existingDebugToken, newToken;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          existingDebugToken = undefined;\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, readDebugTokenFromIndexedDB()];\n        case 2:\n          existingDebugToken = _a.sent();\n          return [3 /*break*/, 4];\n        case 3:\n          _a.sent();\n          return [3 /*break*/, 4];\n        case 4:\n          if (!existingDebugToken) {\n            newToken = uuidv4();\n            // We don't need to block on writing to indexeddb\n            // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n            // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n            // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n            // You should switch to a different browser that supports indexeddb\n            writeDebugTokenToIndexedDB(newToken).catch(function (e) {\n              return logger.warn(\"Failed to persist debug token to indexeddb. Error: \" + e);\n            });\n            // Not using logger because I don't think we ever want this accidentally hidden?\n            console.log(\"AppCheck debug token: \" + newToken + \". You will need to whitelist it in the Firebase console for it to work\");\n            return [2 /*return*/, newToken];\n          } else {\n            return [2 /*return*/, existingDebugToken];\n          }\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isDebugMode() {\n  var debugState = getDebugState();\n  return debugState.enabled;\n}\nfunction getDebugToken() {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var state;\n    return tslib.__generator(this, function (_a) {\n      state = getDebugState();\n      if (state.enabled && state.token) {\n        return [2 /*return*/, state.token.promise];\n      } else {\n        // should not happen!\n        throw Error(\"\\n            Can't get debug token in production mode.\\n        \");\n      }\n    });\n  });\n}\nfunction initializeDebugMode() {\n  var globals = util.getGlobal();\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\n    return;\n  }\n  var debugState = getDebugState();\n  debugState.enabled = true;\n  var deferredToken = new util.Deferred();\n  debugState.token = deferredToken;\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nvar defaultTokenErrorData = {\n  error: 'UNKNOWN_ERROR'\n};\n/**\r\n * This function will always resolve.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\nfunction getToken$2(app, platformLoggerProvider, forceRefresh) {\n  if (forceRefresh === void 0) {\n    forceRefresh = false;\n  }\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var state, token, error, cachedToken, tokenFromDebugExchange, _a, _b, _c, e_1, interopTokenResult;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          ensureActivated(app);\n          state = getState(app);\n          token = state.token;\n          error = undefined;\n          if (!!token) return [3 /*break*/, 2];\n          return [4 /*yield*/, state.cachedTokenPromise];\n        case 1:\n          cachedToken = _d.sent();\n          if (cachedToken && isValid(cachedToken)) {\n            token = cachedToken;\n            setState(app, tslib.__assign(tslib.__assign({}, state), {\n              token: token\n            }));\n            // notify all listeners with the cached token\n            notifyTokenListeners(app, {\n              token: token.token\n            });\n          }\n          _d.label = 2;\n        case 2:\n          // Return the cached token (from either memory or indexedDB) if it's valid\n          if (!forceRefresh && token && isValid(token)) {\n            return [2 /*return*/, {\n              token: token.token\n            }];\n          }\n          if (!isDebugMode()) return [3 /*break*/, 6];\n          _a = exchangeToken;\n          _b = getExchangeDebugTokenRequest;\n          _c = [app];\n          return [4 /*yield*/, getDebugToken()];\n        case 3:\n          return [4 /*yield*/, _a.apply(void 0, [_b.apply(void 0, _c.concat([_d.sent()])), platformLoggerProvider])];\n        case 4:\n          tokenFromDebugExchange = _d.sent();\n          // Write debug token to indexedDB.\n          return [4 /*yield*/, writeTokenToStorage(app, tokenFromDebugExchange)];\n        case 5:\n          // Write debug token to indexedDB.\n          _d.sent();\n          // Write debug token to state.\n          setState(app, tslib.__assign(tslib.__assign({}, state), {\n            token: tokenFromDebugExchange\n          }));\n          return [2 /*return*/, {\n            token: tokenFromDebugExchange.token\n          }];\n        case 6:\n          _d.trys.push([6, 8,, 9]);\n          return [4 /*yield*/, state.provider.getToken()];\n        case 7:\n          // state.provider is populated in initializeAppCheck()\n          // ensureActivated() at the top of this function checks that\n          // initializeAppCheck() has been called.\n          token = _d.sent();\n          return [3 /*break*/, 9];\n        case 8:\n          e_1 = _d.sent();\n          // `getToken()` should never throw, but logging error text to console will aid debugging.\n          logger.error(e_1);\n          error = e_1;\n          return [3 /*break*/, 9];\n        case 9:\n          if (!!token) return [3 /*break*/, 10];\n          // if token is undefined, there must be an error.\n          // we return a dummy token along with the error\n          interopTokenResult = makeDummyTokenResult(error);\n          return [3 /*break*/, 12];\n        case 10:\n          interopTokenResult = {\n            token: token.token\n          };\n          // write the new token to the memory state as well as the persistent storage.\n          // Only do it if we got a valid new token\n          setState(app, tslib.__assign(tslib.__assign({}, state), {\n            token: token\n          }));\n          return [4 /*yield*/, writeTokenToStorage(app, token)];\n        case 11:\n          _d.sent();\n          _d.label = 12;\n        case 12:\n          notifyTokenListeners(app, interopTokenResult);\n          return [2 /*return*/, interopTokenResult];\n      }\n    });\n  });\n}\nfunction addTokenListener(app, platformLoggerProvider, type, listener, onError) {\n  var state = getState(app);\n  var tokenListener = {\n    next: listener,\n    error: onError,\n    type: type\n  };\n  var newState = tslib.__assign(tslib.__assign({}, state), {\n    tokenObservers: tslib.__spreadArray(tslib.__spreadArray([], state.tokenObservers), [tokenListener])\n  });\n  /**\r\n   * Invoke the listener with the valid token, then start the token refresher\r\n   */\n  if (!newState.tokenRefresher) {\n    var tokenRefresher = createTokenRefresher(app, platformLoggerProvider);\n    newState.tokenRefresher = tokenRefresher;\n  }\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  if (!newState.tokenRefresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    newState.tokenRefresher.start();\n  }\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    var validToken_1 = state.token;\n    Promise.resolve().then(function () {\n      return listener({\n        token: validToken_1.token\n      });\n    }).catch(function () {\n      /** Ignore errors in listeners. */\n    });\n  } else if (state.token == null) {\n    // Only check cache if there was no token. If the token was invalid,\n    // skip this and rely on exchange endpoint.\n    void state.cachedTokenPromise // Storage token promise. Always populated in `activate()`.\n    .then(function (cachedToken) {\n      if (cachedToken && isValid(cachedToken)) {\n        listener({\n          token: cachedToken.token\n        });\n      }\n    }).catch(function () {\n      /** Ignore errors in listeners. */\n    });\n  }\n  setState(app, newState);\n}\nfunction removeTokenListener(app, listener) {\n  var state = getState(app);\n  var newObservers = state.tokenObservers.filter(function (tokenObserver) {\n    return tokenObserver.next !== listener;\n  });\n  if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) {\n    state.tokenRefresher.stop();\n  }\n  setState(app, tslib.__assign(tslib.__assign({}, state), {\n    tokenObservers: newObservers\n  }));\n}\nfunction createTokenRefresher(app, platformLoggerProvider) {\n  var _this = this;\n  return new Refresher(\n  // Keep in mind when this fails for any reason other than the ones\n  // for which we should retry, it will effectively stop the proactive refresh.\n  function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var state, result;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            state = getState(app);\n            if (!!state.token) return [3 /*break*/, 2];\n            return [4 /*yield*/, getToken$2(app, platformLoggerProvider)];\n          case 1:\n            result = _a.sent();\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, getToken$2(app, platformLoggerProvider, true)];\n          case 3:\n            result = _a.sent();\n            _a.label = 4;\n          case 4:\n            // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n            if (result.error) {\n              throw result.error;\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  }, function () {\n    // TODO: when should we retry?\n    return true;\n  }, function () {\n    var state = getState(app);\n    if (state.token) {\n      // issuedAtTime + (50% * total TTL) + 5 minutes\n      var nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 5 * 60 * 1000;\n      // Do not allow refresh time to be past (expireTime - 5 minutes)\n      var latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\n      nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\n      return Math.max(0, nextRefreshTimeMillis - Date.now());\n    } else {\n      return 0;\n    }\n  }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\n}\nfunction notifyTokenListeners(app, token) {\n  var observers = getState(app).tokenObservers;\n  for (var _i = 0, observers_1 = observers; _i < observers_1.length; _i++) {\n    var observer = observers_1[_i];\n    try {\n      if (observer.type === \"EXTERNAL\" /* EXTERNAL */ && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (ignored) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\nfunction isValid(token) {\n  return token.expireTimeMillis - Date.now() > 0;\n}\nfunction makeDummyTokenResult(error) {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error: error\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nfunction initialize(app, siteKey) {\n  var state = getState(app);\n  var initialized = new util.Deferred();\n  setState(app, tslib.__assign(tslib.__assign({}, state), {\n    reCAPTCHAState: {\n      initialized: initialized\n    }\n  }));\n  var divId = \"fire_app_check_\" + app.name;\n  var invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n  document.body.appendChild(invisibleDiv);\n  var grecaptcha = getRecaptcha();\n  if (!grecaptcha) {\n    loadReCAPTCHAScript(function () {\n      var grecaptcha = getRecaptcha();\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      grecaptcha.ready(function () {\n        // Invisible widgets allow us to set a different siteKey for each widget, so we use them to support multiple apps\n        renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n        initialized.resolve(grecaptcha);\n      });\n    });\n  } else {\n    grecaptcha.ready(function () {\n      renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n      initialized.resolve(grecaptcha);\n    });\n  }\n  return initialized.promise;\n}\nfunction getToken$1(app) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var reCAPTCHAState, recaptcha;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ensureActivated(app);\n          reCAPTCHAState = getState(app).reCAPTCHAState;\n          return [4 /*yield*/, reCAPTCHAState.initialized.promise];\n        case 1:\n          recaptcha = _a.sent();\n          return [2 /*return*/, new Promise(function (resolve, _reject) {\n            // Updated after initialization is complete.\n            var reCAPTCHAState = getState(app).reCAPTCHAState;\n            recaptcha.ready(function () {\n              resolve(\n              // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n              recaptcha.execute(reCAPTCHAState.widgetId, {\n                action: 'fire_app_check'\n              }));\n            });\n          })];\n      }\n    });\n  });\n}\n/**\r\n *\r\n * @param app\r\n * @param container - Id of a HTML element.\r\n */\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\n  var widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n  var state = getState(app);\n  setState(app, tslib.__assign(tslib.__assign({}, state), {\n    reCAPTCHAState: tslib.__assign(tslib.__assign({}, state.reCAPTCHAState), {\n      // state.reCAPTCHAState is set in the initialize()\n      widgetId: widgetId\n    })\n  }));\n}\nfunction loadReCAPTCHAScript(onload) {\n  var script = document.createElement('script');\n  script.src = \"\" + RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\r\n * for an App Check token.\r\n */\nvar ReCaptchaV3Provider = /** @class */function () {\n  /**\r\n   * Create a ReCaptchaV3Provider instance.\r\n   * @param siteKey - ReCAPTCHA V3 siteKey.\r\n   */\n  function ReCaptchaV3Provider(_siteKey) {\n    this._siteKey = _siteKey;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n  ReCaptchaV3Provider.prototype.getToken = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var attestedClaimsToken;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._app || !this._platformLoggerProvider) {\n              // This should only occur if user has not called initializeAppCheck().\n              // We don't have an appName to provide if so.\n              // This should already be caught in the top level `getToken()` function.\n              throw ERROR_FACTORY.create(\"use-before-activation\" /* USE_BEFORE_ACTIVATION */, {\n                appName: ''\n              });\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, getToken$1(this._app)];\n          case 2:\n            attestedClaimsToken = _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            _a.sent();\n            // reCaptcha.execute() throws null which is not very descriptive.\n            throw ERROR_FACTORY.create(\"recaptcha-error\" /* RECAPTCHA_ERROR */);\n          case 4:\n            return [2 /*return*/, exchangeToken(getExchangeRecaptchaTokenRequest(this._app, attestedClaimsToken), this._platformLoggerProvider)];\n        }\n      });\n    });\n  };\n  ReCaptchaV3Provider.prototype.initialize = function (app, platformLoggerProvider) {\n    this._app = app;\n    this._platformLoggerProvider = platformLoggerProvider;\n    initialize(app, this._siteKey).catch(function () {\n      /* we don't care about the initialization result */\n    });\n  };\n  return ReCaptchaV3Provider;\n}();\n/**\r\n * Custom provider class.\r\n */\nvar CustomProvider = /** @class */function () {\n  function CustomProvider(_customProviderOptions) {\n    this._customProviderOptions = _customProviderOptions;\n  }\n  /**\r\n   * @internal\r\n   */\n  CustomProvider.prototype.getToken = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var customToken, issuedAtTimeSeconds, issuedAtTimeMillis;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._app) {\n              // This should only occur if user has not called initializeAppCheck().\n              // We don't have an appName to provide if so.\n              // This should already be caught in the top level `getToken()` function.\n              throw ERROR_FACTORY.create(\"use-before-activation\" /* USE_BEFORE_ACTIVATION */, {\n                appName: ''\n              });\n            }\n            return [4 /*yield*/, this._customProviderOptions.getToken()];\n          case 1:\n            customToken = _a.sent();\n            issuedAtTimeSeconds = util.issuedAtTime(customToken.token);\n            issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1000 : Date.now();\n            return [2 /*return*/, tslib.__assign(tslib.__assign({}, customToken), {\n              issuedAtTimeMillis: issuedAtTimeMillis\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * @internal\r\n   */\n  CustomProvider.prototype.initialize = function (app) {\n    this._app = app;\n  };\n  return CustomProvider;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n *\r\n * @param app\r\n * @param siteKeyOrProvider - optional custom attestation provider\r\n * or reCAPTCHA provider\r\n * @param isTokenAutoRefreshEnabled - if true, enables auto refresh\r\n * of appCheck token.\r\n */\nfunction activate(app, siteKeyOrProvider, platformLoggerProvider, isTokenAutoRefreshEnabled) {\n  var state = getState(app);\n  if (state.activated) {\n    throw ERROR_FACTORY.create(\"already-activated\" /* ALREADY_ACTIVATED */, {\n      appName: app.name\n    });\n  }\n  var newState = tslib.__assign(tslib.__assign({}, state), {\n    activated: true\n  });\n  // Read cached token from storage if it exists and store it in memory.\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(function (cachedToken) {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, tslib.__assign(tslib.__assign({}, getState(app)), {\n        token: cachedToken\n      }));\n    }\n    return cachedToken;\n  });\n  if (typeof siteKeyOrProvider === 'string') {\n    newState.provider = new ReCaptchaV3Provider(siteKeyOrProvider);\n  } else if (siteKeyOrProvider instanceof ReCaptchaV3Provider || siteKeyOrProvider instanceof CustomProvider) {\n    newState.provider = siteKeyOrProvider;\n  } else {\n    // Process \"old\" custom provider to avoid breaking previous users.\n    // This was defined at beta release as simply an object with a\n    // getToken() method.\n    newState.provider = new CustomProvider({\n      getToken: siteKeyOrProvider.getToken\n    });\n  }\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  newState.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled === undefined ? app.automaticDataCollectionEnabled : isTokenAutoRefreshEnabled;\n  setState(app, newState);\n  newState.provider.initialize(app, platformLoggerProvider);\n}\nfunction setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled) {\n  var state = getState(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  setState(app, tslib.__assign(tslib.__assign({}, state), {\n    isTokenAutoRefreshEnabled: isTokenAutoRefreshEnabled\n  }));\n}\n/**\r\n * Differs from internal getToken in that it throws the error.\r\n */\nfunction getToken(app, platformLoggerProvider, forceRefresh) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var result;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, getToken$2(app, platformLoggerProvider, forceRefresh)];\n        case 1:\n          result = _a.sent();\n          if (result.error) {\n            throw result.error;\n          }\n          return [2 /*return*/, {\n            token: result.token\n          }];\n      }\n    });\n  });\n}\nfunction onTokenChanged(app, platformLoggerProvider, onNextOrObserver, onError,\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nonCompletion) {\n  var nextFn = function () {};\n  var errorFn = function () {};\n  if (onNextOrObserver.next != null) {\n    nextFn = onNextOrObserver.next.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver;\n  }\n  if (onNextOrObserver.error != null) {\n    errorFn = onNextOrObserver.error.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(app, platformLoggerProvider, \"EXTERNAL\" /* EXTERNAL */, nextFn, errorFn);\n  return function () {\n    return removeTokenListener(app, nextFn);\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction factory(app, platformLoggerProvider) {\n  return {\n    app: app,\n    activate: function (siteKeyOrProvider, isTokenAutoRefreshEnabled) {\n      return activate(app,\n      // Public types of ReCaptchaV3Provider/CustomProvider don't\n      // expose getToken() and aren't recognized as the internal\n      // class version of themselves.\n      siteKeyOrProvider, platformLoggerProvider, isTokenAutoRefreshEnabled);\n    },\n    setTokenAutoRefreshEnabled: function (isTokenAutoRefreshEnabled) {\n      return setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled);\n    },\n    getToken: function (forceRefresh) {\n      return getToken(app, platformLoggerProvider, forceRefresh);\n    },\n    onTokenChanged: function (onNextOrObserver, onError, onCompletion) {\n      return onTokenChanged(app, platformLoggerProvider,\n      /**\r\n       * This can still be an observer. Need to do this casting because\r\n       * according to Typescript: \"Implementation signatures of overloads\r\n       * are not externally visible\"\r\n       */\n      onNextOrObserver, onError);\n    },\n    INTERNAL: {\n      delete: function () {\n        var tokenObservers = getState(app).tokenObservers;\n        for (var _i = 0, tokenObservers_1 = tokenObservers; _i < tokenObservers_1.length; _i++) {\n          var tokenObserver = tokenObservers_1[_i];\n          removeTokenListener(app, tokenObserver.next);\n        }\n        return Promise.resolve();\n      }\n    }\n  };\n}\nfunction internalFactory(app, platformLoggerProvider) {\n  return {\n    getToken: function (forceRefresh) {\n      return getToken$2(app, platformLoggerProvider, forceRefresh);\n    },\n    addTokenListener: function (listener) {\n      return addTokenListener(app, platformLoggerProvider, \"INTERNAL\" /* INTERNAL */, listener);\n    },\n    removeTokenListener: function (listener) {\n      return removeTokenListener(app, listener);\n    }\n  };\n}\nvar name = \"@firebase/app-check\";\nvar version = \"0.3.2\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar APP_CHECK_NAME = 'appCheck';\nvar APP_CHECK_NAME_INTERNAL = 'app-check-internal';\nfunction registerAppCheck(firebase) {\n  // The public interface\n  firebase.INTERNAL.registerComponent(new component.Component(APP_CHECK_NAME, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var platformLoggerProvider = container.getProvider('platform-logger');\n    return factory(app, platformLoggerProvider);\n  }, \"PUBLIC\" /* PUBLIC */).setServiceProps({\n    ReCaptchaV3Provider: ReCaptchaV3Provider,\n    CustomProvider: CustomProvider\n  })\n  /**\r\n   * AppCheck can only be initialized by explicitly calling firebase.appCheck()\r\n   * We don't want firebase products that consume AppCheck to gate on AppCheck\r\n   * if the user doesn't intend them to, just because the AppCheck component\r\n   * is registered.\r\n   */.setInstantiationMode(\"EXPLICIT\" /* EXPLICIT */)\n  /**\r\n   * Because all firebase products that depend on app-check depend on app-check-internal directly,\r\n   * we need to initialize app-check-internal after app-check is initialized to make it\r\n   * available to other firebase products.\r\n   */.setInstanceCreatedCallback(function (container, _instanceIdentifier, _instance) {\n    var appCheckInternalProvider = container.getProvider(APP_CHECK_NAME_INTERNAL);\n    appCheckInternalProvider.initialize();\n  }));\n  // The internal interface used by other Firebase products\n  firebase.INTERNAL.registerComponent(new component.Component(APP_CHECK_NAME_INTERNAL, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var platformLoggerProvider = container.getProvider('platform-logger');\n    return internalFactory(app, platformLoggerProvider);\n  }, \"PUBLIC\" /* PUBLIC */).setInstantiationMode(\"EXPLICIT\" /* EXPLICIT */));\n  firebase.registerVersion(name, version);\n}\nregisterAppCheck(firebase__default['default']);\ninitializeDebugMode();","map":{"version":3,"names":["ERRORS","_a","ERROR_FACTORY","util","ErrorFactory","APP_CHECK_STATES","Map","DEFAULT_STATE","activated","tokenObservers","DEBUG_STATE","enabled","getState","app","get","setState","state","set","getDebugState","BASE_ENDPOINT","EXCHANGE_RECAPTCHA_TOKEN_METHOD","EXCHANGE_DEBUG_TOKEN_METHOD","TOKEN_REFRESH_TIME","OFFSET_DURATION","RETRIAL_MIN_WAIT","RETRIAL_MAX_WAIT","Refresher","operation","retryPolicy","getWaitDuration","lowerBound","upperBound","pending","nextErrorWaitInterval","Error","prototype","start","process","catch","stop","reject","isRunning","hasSucceeded","Deferred","sleep","getNextRun","sent","resolve","promise","error_1","currentErrorWaitInterval","ms","Promise","setTimeout","getRecaptcha","self","grecaptcha","ensureActivated","create","appName","name","uuidv4","replace","c","r","Math","random","v","toString","formatDummyToken","tokenErrorData","base64","encodeString","JSON","stringify","exchangeToken","platformLoggerProvider","url","body","headers","platformLogger","getImmediate","optional","getPlatformInfoString","options","method","fetch","response","_b","originalErrorMessage","originalError_1","message","status","httpStatus","json","responseBody","originalError_2","match","ttl","isNaN","Number","timeToLiveAsNumber","now","Date","token","attestationToken","expireTimeMillis","issuedAtTimeMillis","getExchangeRecaptchaTokenRequest","reCAPTCHAToken","projectId","appId","apiKey","recaptcha_token","getExchangeDebugTokenRequest","debugToken","debug_token","DB_NAME","DB_VERSION","STORE_NAME","DEBUG_TOKEN_KEY","dbPromise","getDBPromise","request","indexedDB","open","onsuccess","event","target","result","onerror","error","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","e","readTokenFromIndexedDB","read","computeKey","writeTokenToIndexedDB","write","writeDebugTokenToIndexedDB","readDebugTokenFromIndexedDB","key","value","transaction","store","objectStore","put","compositeKey","_event","undefined","logger","logger$1","Logger","readTokenFromStorage","isIndexedDBAvailable","warn","e_1","writeTokenToStorage","readOrCreateDebugTokenFromStorage","existingDebugToken","newToken","console","log","isDebugMode","debugState","getDebugToken","initializeDebugMode","globals","getGlobal","FIREBASE_APPCHECK_DEBUG_TOKEN","deferredToken","defaultTokenErrorData","getToken$2","getToken","forceRefresh","cachedTokenPromise","cachedToken","_d","isValid","tslib","__assign","notifyTokenListeners","apply","_c","concat","tokenFromDebugExchange","provider","interopTokenResult","makeDummyTokenResult","addTokenListener","type","listener","onError","tokenListener","next","newState","__spreadArray","tokenRefresher","createTokenRefresher","isTokenAutoRefreshEnabled","validToken_1","then","removeTokenListener","newObservers","filter","tokenObserver","length","_this","__awaiter","nextRefreshTimeMillis","latestAllowableRefresh","min","max","observers","_i","observers_1","observer","ignored","RECAPTCHA_URL","initialize","siteKey","initialized","reCAPTCHAState","divId","invisibleDiv","document","createElement","id","style","display","appendChild","loadReCAPTCHAScript","ready","renderInvisibleWidget","getToken$1","recaptcha","_reject","execute","widgetId","action","container","render","sitekey","size","onload","script","src","head","ReCaptchaV3Provider","_siteKey","_app","_platformLoggerProvider","attestedClaimsToken","CustomProvider","_customProviderOptions","customToken","issuedAtTimeSeconds","issuedAtTime","activate","siteKeyOrProvider","automaticDataCollectionEnabled","setTokenAutoRefreshEnabled","onTokenChanged","onNextOrObserver","onCompletion","nextFn","errorFn","bind","factory","INTERNAL","delete","tokenObservers_1","internalFactory","APP_CHECK_NAME","APP_CHECK_NAME_INTERNAL","registerAppCheck","firebase","registerComponent","component","Component","getProvider","setServiceProps","setInstantiationMode","setInstanceCreatedCallback","_instanceIdentifier","_instance","appCheckInternalProvider","registerVersion","version","firebase__default"],"sources":["/home/ngare/Projects/Lakucha/node_modules/@firebase/app-check/src/errors.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/app-check/src/state.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/app-check/src/constants.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/app-check/src/proactive-refresh.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/app-check/src/util.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/app-check/src/client.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/app-check/src/indexeddb.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/app-check/src/logger.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/app-check/src/storage.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/app-check/src/debug.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/app-check/src/internal-api.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/app-check/src/recaptcha.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/app-check/src/providers.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/app-check/src/api.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/app-check/src/factory.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/app-check/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  ALREADY_ACTIVATED = 'already-activated',\n  USE_BEFORE_ACTIVATION = 'use-before-activation',\n  FETCH_NETWORK_ERROR = 'fetch-network-error',\n  FETCH_PARSE_ERROR = 'fetch-parse-error',\n  FETCH_STATUS_ERROR = 'fetch-status-error',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  RECAPTCHA_ERROR = 'recaptcha-error'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.ALREADY_ACTIVATED]:\n    'You are trying to activate AppCheck for FirebaseApp {$appName}, ' +\n    'while it is already activated. ' +\n    'AppCheck can only be activated once.',\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'AppCheck is being used before activate() is called for FirebaseApp {$appName}. ' +\n    'Please make sure you call activate() before instantiating other Firebase services.',\n  [AppCheckError.FETCH_NETWORK_ERROR]:\n    'Fetch failed to connect to a network. Check Internet connection. ' +\n    'Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_PARSE_ERROR]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_STATUS_ERROR]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [AppCheckError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.RECAPTCHA_ERROR]: 'ReCAPTCHA error.'\n};\n\ninterface ErrorParams {\n  [AppCheckError.ALREADY_ACTIVATED]: { appName: string };\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n  [AppCheckError.FETCH_NETWORK_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_PARSE_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_STATUS_ERROR]: { httpStatus: number };\n  [AppCheckError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_WRITE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { AppCheckToken, AppCheckTokenResult } from '@firebase/app-check-types';\nimport { AppCheckTokenListener } from '@firebase/app-check-interop-types';\nimport { Refresher } from './proactive-refresh';\nimport { Deferred, PartialObserver } from '@firebase/util';\nimport { GreCAPTCHA } from './recaptcha';\nimport { AppCheckProviderInternal } from './providers';\n\nexport interface AppCheckTokenInternal extends AppCheckToken {\n  issuedAtTimeMillis: number;\n}\n\nexport interface AppCheckTokenObserver\n  extends PartialObserver<AppCheckTokenResult> {\n  // required\n  next: AppCheckTokenListener;\n  type: ListenerType;\n}\n\nexport const enum ListenerType {\n  'INTERNAL' = 'INTERNAL',\n  'EXTERNAL' = 'EXTERNAL'\n}\n\nexport interface AppCheckState {\n  activated: boolean;\n  tokenObservers: AppCheckTokenObserver[];\n  provider?: AppCheckProviderInternal;\n  siteKey?: string;\n  token?: AppCheckTokenInternal;\n  cachedTokenPromise?: Promise<AppCheckTokenInternal | undefined>;\n  tokenRefresher?: Refresher;\n  reCAPTCHAState?: ReCAPTCHAState;\n  isTokenAutoRefreshEnabled?: boolean;\n}\n\nexport interface ReCAPTCHAState {\n  initialized: Deferred<GreCAPTCHA>;\n  widgetId?: string;\n}\n\nexport interface DebugState {\n  enabled: boolean;\n  // This is the debug token string the user interacts with.\n  token?: Deferred<string>;\n}\n\nconst APP_CHECK_STATES = new Map<FirebaseApp, AppCheckState>();\nexport const DEFAULT_STATE: AppCheckState = {\n  activated: false,\n  tokenObservers: []\n};\n\nconst DEBUG_STATE: DebugState = {\n  enabled: false\n};\n\nexport function getState(app: FirebaseApp): AppCheckState {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nexport function setState(app: FirebaseApp, state: AppCheckState): void {\n  APP_CHECK_STATES.set(app, state);\n}\n\n// for testing only\nexport function clearState(): void {\n  APP_CHECK_STATES.clear();\n  DEBUG_STATE.enabled = false;\n  DEBUG_STATE.token = undefined;\n}\n\nexport function getDebugState(): DebugState {\n  return DEBUG_STATE;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BASE_ENDPOINT =\n  'https://content-firebaseappcheck.googleapis.com/v1beta';\n\nexport const EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nexport const EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\n\nexport const TOKEN_REFRESH_TIME = {\n  /**\n   * The offset time before token natural expiration to run the refresh.\n   * This is currently 5 minutes.\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\n   * This is the first retrial wait after an error. This is currently\n   * 30 seconds.\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\n   * This is the maximum retrial wait, currently 16 minutes.\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\n/**\n * Port from auth proactiverefresh.js\n *\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nexport class Refresher {\n  private pending: Deferred<unknown> | null = null;\n  private nextErrorWaitInterval: number;\n  constructor(\n    private readonly operation: () => Promise<unknown>,\n    private readonly retryPolicy: (error: unknown) => boolean,\n    private readonly getWaitDuration: () => number,\n    private readonly lowerBound: number,\n    private readonly upperBound: number\n  ) {\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error(\n        'Proactive refresh lower bound greater than upper bound!'\n      );\n    }\n  }\n\n  start(): void {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop(): void {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning(): boolean {\n    return !!this.pending;\n  }\n\n  private async process(hasSucceeded: boolean): Promise<void> {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded));\n\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n\n      this.pending.resolve();\n      await this.pending.promise;\n\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  private getNextRun(hasSucceeded: boolean): number {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GreCAPTCHA } from './recaptcha';\nimport { getState } from './state';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { base64 } from '@firebase/util';\n\nexport function getRecaptcha(): GreCAPTCHA | undefined {\n  return self.grecaptcha;\n}\n\nexport function ensureActivated(app: FirebaseApp): void {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n      appName: app.name\n    });\n  }\n}\n\n/**\n * Copied from https://stackoverflow.com/a/2117523\n */\nexport function uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Stringify and base64 encode token error data.\n *\n * @param tokenError Error data, currently hardcoded.\n */\nexport function formatDummyToken(\n  tokenErrorData: Record<string, string>\n): string {\n  return base64.encodeString(\n    JSON.stringify(tokenErrorData),\n    /* webSafe= */ false\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BASE_ENDPOINT,\n  EXCHANGE_DEBUG_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_TOKEN_METHOD\n} from './constants';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { Provider } from '@firebase/component';\nimport { AppCheckTokenInternal } from './state';\n\n/**\n * Response JSON returned from AppCheck server endpoint.\n */\ninterface AppCheckResponse {\n  attestationToken: string;\n  // timeToLive\n  ttl: string;\n}\n\ninterface AppCheckRequest {\n  url: string;\n  body: { [key: string]: string };\n}\n\nexport async function exchangeToken(\n  { url, body }: AppCheckRequest,\n  platformLoggerProvider: Provider<'platform-logger'>\n): Promise<AppCheckTokenInternal> {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json'\n  };\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n  }\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_NETWORK_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_STATUS_ERROR, {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody: AppCheckResponse;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage:\n        `ttl field (timeToLive) is not in standard Protobuf Duration ` +\n        `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n\n  const now = Date.now();\n  return {\n    token: responseBody.attestationToken,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nexport function getExchangeRecaptchaTokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      recaptcha_token: reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeDebugTokenRequest(\n  app: FirebaseApp,\n  debugToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { AppCheckTokenInternal } from './state';\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\n\nlet dbPromise: Promise<IDBDatabase> | null = null;\nfunction getDBPromise(): Promise<IDBDatabase> {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n\n      request.onerror = event => {\n        reject(\n          ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n            originalErrorMessage: (event.target as IDBRequest).error?.message\n          })\n        );\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n          originalErrorMessage: e.message\n        })\n      );\n    }\n  });\n\n  return dbPromise;\n}\n\nexport function readTokenFromIndexedDB(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  return read(computeKey(app)) as Promise<AppCheckTokenInternal | undefined>;\n}\n\nexport function writeTokenToIndexedDB(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  return write(computeKey(app), token);\n}\n\nexport function writeDebugTokenToIndexedDB(token: string): Promise<void> {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nexport function readDebugTokenFromIndexedDB(): Promise<string | undefined> {\n  return read(DEBUG_TOKEN_KEY) as Promise<string | undefined>;\n}\n\nasync function write(key: string, value: unknown): Promise<void> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_WRITE, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nasync function read(key: string): Promise<unknown> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = (event.target as IDBRequest).result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_GET, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.options.appId}-${app.name}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-check');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { uuidv4 } from './util';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  readDebugTokenFromIndexedDB,\n  readTokenFromIndexedDB,\n  writeDebugTokenToIndexedDB,\n  writeTokenToIndexedDB\n} from './indexeddb';\nimport { logger } from './logger';\nimport { AppCheckTokenInternal } from './state';\n\n/**\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\n */\nexport async function readTokenFromStorage(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from indexeddb. Error: ${e}`);\n    }\n    return token;\n  }\n\n  return undefined;\n}\n\n/**\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\n */\nexport function writeTokenToStorage(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to indexeddb. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nexport async function readOrCreateDebugTokenFromStorage(): Promise<string> {\n  /**\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\n   * But it won't happen here, because this function will be called exactly once.\n   */\n  let existingDebugToken: string | undefined = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e =>\n      logger.warn(`Failed to persist debug token to indexeddb. Error: ${e}`)\n    );\n    // Not using logger because I don't think we ever want this accidentally hidden?\n    console.log(\n      `AppCheck debug token: ${newToken}. You will need to whitelist it in the Firebase console for it to work`\n    );\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getDebugState } from './state';\nimport { readOrCreateDebugTokenFromStorage } from './storage';\nimport { Deferred, getGlobal } from '@firebase/util';\n\ndeclare global {\n  // var must be used for global scopes\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#type-checking-for-globalthis\n  // eslint-disable-next-line no-var\n  var FIREBASE_APPCHECK_DEBUG_TOKEN: boolean | string | undefined;\n}\n\nexport function isDebugMode(): boolean {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nexport async function getDebugToken(): Promise<string> {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nexport function initializeDebugMode(): void {\n  const globals = getGlobal();\n  if (\n    typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\n    globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true\n  ) {\n    return;\n  }\n\n  const debugState = getDebugState();\n  debugState.enabled = true;\n  const deferredToken = new Deferred<string>();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  AppCheckTokenListener,\n  AppCheckTokenResult\n} from '@firebase/app-check-interop-types';\nimport {\n  AppCheckTokenInternal,\n  AppCheckTokenObserver,\n  getState,\n  ListenerType,\n  setState\n} from './state';\nimport { TOKEN_REFRESH_TIME } from './constants';\nimport { Refresher } from './proactive-refresh';\nimport { ensureActivated, formatDummyToken } from './util';\nimport { exchangeToken, getExchangeDebugTokenRequest } from './client';\nimport { writeTokenToStorage } from './storage';\nimport { getDebugToken, isDebugMode } from './debug';\nimport { logger } from './logger';\nimport { Provider } from '@firebase/component';\n\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nexport const defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\n\n/**\n * This function will always resolve.\n * The result will contain an error field if there is any error.\n * In case there is an error, the token field in the result will be populated with a dummy value\n */\nexport async function getToken(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  forceRefresh = false\n): Promise<AppCheckTokenResult> {\n  ensureActivated(app);\n\n  const state = getState(app);\n\n  /**\n   * First check if there is a token in memory from a previous `getToken()` call.\n   */\n  let token: AppCheckTokenInternal | undefined = state.token;\n  let error: Error | undefined = undefined;\n\n  /**\n   * If there is no token in memory, try to load token from indexedDB.\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken && isValid(cachedToken)) {\n      token = cachedToken;\n\n      setState(app, { ...state, token });\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, { token: token.token });\n    }\n  }\n\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n\n  /**\n   * DEBUG MODE\n   * If debug mode is set, and there is no cached token, fetch a new App\n   * Check token using the debug token, and return it directly.\n   */\n  if (isDebugMode()) {\n    const tokenFromDebugExchange: AppCheckTokenInternal = await exchangeToken(\n      getExchangeDebugTokenRequest(app, await getDebugToken()),\n      platformLoggerProvider\n    );\n    // Write debug token to indexedDB.\n    await writeTokenToStorage(app, tokenFromDebugExchange);\n    // Write debug token to state.\n    setState(app, { ...state, token: tokenFromDebugExchange });\n    return { token: tokenFromDebugExchange.token };\n  }\n\n  /**\n   * request a new token\n   */\n  try {\n    // state.provider is populated in initializeAppCheck()\n    // ensureActivated() at the top of this function checks that\n    // initializeAppCheck() has been called.\n    token = await state.provider!.getToken();\n  } catch (e) {\n    // `getToken()` should never throw, but logging error text to console will aid debugging.\n    logger.error(e);\n    error = e;\n  }\n\n  let interopTokenResult: AppCheckTokenResult | undefined;\n  if (!token) {\n    // if token is undefined, there must be an error.\n    // we return a dummy token along with the error\n    interopTokenResult = makeDummyTokenResult(error!);\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    setState(app, { ...state, token });\n    await writeTokenToStorage(app, token);\n  }\n\n  notifyTokenListeners(app, interopTokenResult);\n  return interopTokenResult;\n}\n\nexport function addTokenListener(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  type: ListenerType,\n  listener: AppCheckTokenListener,\n  onError?: (error: Error) => void\n): void {\n  const state = getState(app);\n  const tokenListener: AppCheckTokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  const newState = {\n    ...state,\n    tokenObservers: [...state.tokenObservers, tokenListener]\n  };\n\n  /**\n   * Invoke the listener with the valid token, then start the token refresher\n   */\n  if (!newState.tokenRefresher) {\n    const tokenRefresher = createTokenRefresher(app, platformLoggerProvider);\n    newState.tokenRefresher = tokenRefresher;\n  }\n\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  if (!newState.tokenRefresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    newState.tokenRefresher.start();\n  }\n\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve()\n      .then(() => listener({ token: validToken.token }))\n      .catch(() => {\n        /** Ignore errors in listeners. */\n      });\n  } else if (state.token == null) {\n    // Only check cache if there was no token. If the token was invalid,\n    // skip this and rely on exchange endpoint.\n    void state\n      .cachedTokenPromise! // Storage token promise. Always populated in `activate()`.\n      .then(cachedToken => {\n        if (cachedToken && isValid(cachedToken)) {\n          listener({ token: cachedToken.token });\n        }\n      })\n      .catch(() => {\n        /** Ignore errors in listeners. */\n      });\n  }\n\n  setState(app, newState);\n}\n\nexport function removeTokenListener(\n  app: FirebaseApp,\n  listener: (token: AppCheckTokenResult) => void\n): void {\n  const state = getState(app);\n\n  const newObservers = state.tokenObservers.filter(\n    tokenObserver => tokenObserver.next !== listener\n  );\n  if (\n    newObservers.length === 0 &&\n    state.tokenRefresher &&\n    state.tokenRefresher.isRunning()\n  ) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, {\n    ...state,\n    tokenObservers: newObservers\n  });\n}\n\nfunction createTokenRefresher(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): Refresher {\n  return new Refresher(\n    // Keep in mind when this fails for any reason other than the ones\n    // for which we should retry, it will effectively stop the proactive refresh.\n    async () => {\n      const state = getState(app);\n      // If there is no token, we will try to load it from storage and use it\n      // If there is a token, we force refresh it because we know it's going to expire soon\n      let result;\n      if (!state.token) {\n        result = await getToken(app, platformLoggerProvider);\n      } else {\n        result = await getToken(app, platformLoggerProvider, true);\n      }\n\n      // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n      if (result.error) {\n        throw result.error;\n      }\n    },\n    () => {\n      // TODO: when should we retry?\n      return true;\n    },\n    () => {\n      const state = getState(app);\n\n      if (state.token) {\n        // issuedAtTime + (50% * total TTL) + 5 minutes\n        let nextRefreshTimeMillis =\n          state.token.issuedAtTimeMillis +\n          (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\n            0.5 +\n          5 * 60 * 1000;\n        // Do not allow refresh time to be past (expireTime - 5 minutes)\n        const latestAllowableRefresh =\n          state.token.expireTimeMillis - 5 * 60 * 1000;\n        nextRefreshTimeMillis = Math.min(\n          nextRefreshTimeMillis,\n          latestAllowableRefresh\n        );\n        return Math.max(0, nextRefreshTimeMillis - Date.now());\n      } else {\n        return 0;\n      }\n    },\n    TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT,\n    TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT\n  );\n}\n\nfunction notifyTokenListeners(\n  app: FirebaseApp,\n  token: AppCheckTokenResult\n): void {\n  const observers = getState(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === ListenerType.EXTERNAL && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error!(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (ignored) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nexport function isValid(token: AppCheckTokenInternal): boolean {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error: Error): AppCheckTokenResult {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { getState, setState } from './state';\nimport { Deferred } from '@firebase/util';\nimport { getRecaptcha, ensureActivated } from './util';\n\nexport const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\n\nexport function initialize(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const state = getState(app);\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  setState(app, { ...state, reCAPTCHAState: { initialized } });\n\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n\n  document.body.appendChild(invisibleDiv);\n\n  const grecaptcha = getRecaptcha();\n  if (!grecaptcha) {\n    loadReCAPTCHAScript(() => {\n      const grecaptcha = getRecaptcha();\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      grecaptcha.ready(() => {\n        // Invisible widgets allow us to set a different siteKey for each widget, so we use them to support multiple apps\n        renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n        initialized.resolve(grecaptcha);\n      });\n    });\n  } else {\n    grecaptcha.ready(() => {\n      renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n      initialized.resolve(grecaptcha);\n    });\n  }\n\n  return initialized.promise;\n}\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  ensureActivated(app);\n\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getState(app).reCAPTCHAState!;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getState(app).reCAPTCHAState!;\n    recaptcha.ready(() => {\n      resolve(\n        // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n        recaptcha.execute(reCAPTCHAState.widgetId!, {\n          action: 'fire_app_check'\n        })\n      );\n    });\n  });\n}\n\n/**\n *\n * @param app\n * @param container - Id of a HTML element.\n */\nfunction renderInvisibleWidget(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string\n): void {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n\n  const state = getState(app);\n\n  setState(app, {\n    ...state,\n    reCAPTCHAState: {\n      ...state.reCAPTCHAState!, // state.reCAPTCHAState is set in the initialize()\n      widgetId\n    }\n  });\n}\n\nfunction loadReCAPTCHAScript(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = `${RECAPTCHA_URL}`;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\ndeclare global {\n  interface Window {\n    grecaptcha: GreCAPTCHA | undefined;\n  }\n}\n\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { Provider } from '@firebase/component';\nimport { issuedAtTime } from '@firebase/util';\nimport { CustomProviderOptions } from '../../app-check-types';\nimport { exchangeToken, getExchangeRecaptchaTokenRequest } from './client';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport {\n  getToken as getReCAPTCHAToken,\n  initialize as initializeRecaptcha\n} from './recaptcha';\nimport { AppCheckTokenInternal } from './state';\n\nexport interface AppCheckProviderInternal {\n  /**\n   * Returns an AppCheck token.\n   */\n  getToken(): Promise<AppCheckTokenInternal>;\n  /**\n   * Initialize the class once app and platformLoggerProvider are available.\n   */\n  initialize(\n    app: FirebaseApp,\n    platformLoggerProvider: Provider<'platform-logger'>\n  ): void;\n}\n\n/**\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\n * for an App Check token.\n */\nexport class ReCaptchaV3Provider implements AppCheckProviderInternal {\n  private _app?: FirebaseApp;\n  private _platformLoggerProvider?: Provider<'platform-logger'>;\n  /**\n   * Create a ReCaptchaV3Provider instance.\n   * @param siteKey - ReCAPTCHA V3 siteKey.\n   */\n  constructor(private _siteKey: string) {}\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    if (!this._app || !this._platformLoggerProvider) {\n      // This should only occur if user has not called initializeAppCheck().\n      // We don't have an appName to provide if so.\n      // This should already be caught in the top level `getToken()` function.\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: ''\n      });\n    }\n    let attestedClaimsToken;\n    try {\n      attestedClaimsToken = await getReCAPTCHAToken(this._app);\n    } catch (e) {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n    }\n    return exchangeToken(\n      getExchangeRecaptchaTokenRequest(this._app, attestedClaimsToken),\n      this._platformLoggerProvider\n    );\n  }\n\n  initialize(\n    app: FirebaseApp,\n    platformLoggerProvider: Provider<'platform-logger'>\n  ): void {\n    this._app = app;\n    this._platformLoggerProvider = platformLoggerProvider;\n    initializeRecaptcha(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n}\n\n/**\n * Custom provider class.\n */\nexport class CustomProvider implements AppCheckProviderInternal {\n  private _app?: FirebaseApp;\n\n  constructor(private _customProviderOptions: CustomProviderOptions) {}\n\n  /**\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    if (!this._app) {\n      // This should only occur if user has not called initializeAppCheck().\n      // We don't have an appName to provide if so.\n      // This should already be caught in the top level `getToken()` function.\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: ''\n      });\n    }\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis =\n      issuedAtTimeSeconds !== null &&\n      issuedAtTimeSeconds < Date.now() &&\n      issuedAtTimeSeconds > 0\n        ? issuedAtTimeSeconds * 1000\n        : Date.now();\n\n    return { ...customToken, issuedAtTimeMillis };\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckProvider,\n  AppCheckTokenResult\n} from '@firebase/app-check-types';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { getState, setState, AppCheckState, ListenerType } from './state';\nimport {\n  getToken as getTokenInternal,\n  addTokenListener,\n  removeTokenListener,\n  isValid\n} from './internal-api';\nimport { Provider } from '@firebase/component';\nimport { ErrorFn, NextFn, PartialObserver, Unsubscribe } from '@firebase/util';\nimport { CustomProvider, ReCaptchaV3Provider } from './providers';\nimport { readTokenFromStorage } from './storage';\n\n/**\n *\n * @param app\n * @param siteKeyOrProvider - optional custom attestation provider\n * or reCAPTCHA provider\n * @param isTokenAutoRefreshEnabled - if true, enables auto refresh\n * of appCheck token.\n */\nexport function activate(\n  app: FirebaseApp,\n  siteKeyOrProvider:\n    | ReCaptchaV3Provider\n    | CustomProvider\n    // This is the old interface for users to supply a custom provider.\n    | AppCheckProvider\n    | string,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  isTokenAutoRefreshEnabled?: boolean\n): void {\n  const state = getState(app);\n  if (state.activated) {\n    throw ERROR_FACTORY.create(AppCheckError.ALREADY_ACTIVATED, {\n      appName: app.name\n    });\n  }\n\n  const newState: AppCheckState = { ...state, activated: true };\n\n  // Read cached token from storage if it exists and store it in memory.\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, { ...getState(app), token: cachedToken });\n    }\n    return cachedToken;\n  });\n\n  if (typeof siteKeyOrProvider === 'string') {\n    newState.provider = new ReCaptchaV3Provider(siteKeyOrProvider);\n  } else if (\n    siteKeyOrProvider instanceof ReCaptchaV3Provider ||\n    siteKeyOrProvider instanceof CustomProvider\n  ) {\n    newState.provider = siteKeyOrProvider;\n  } else {\n    // Process \"old\" custom provider to avoid breaking previous users.\n    // This was defined at beta release as simply an object with a\n    // getToken() method.\n    newState.provider = new CustomProvider({\n      getToken: siteKeyOrProvider.getToken\n    });\n  }\n\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  newState.isTokenAutoRefreshEnabled =\n    isTokenAutoRefreshEnabled === undefined\n      ? app.automaticDataCollectionEnabled\n      : isTokenAutoRefreshEnabled;\n\n  setState(app, newState);\n\n  newState.provider.initialize(app, platformLoggerProvider);\n}\n\nexport function setTokenAutoRefreshEnabled(\n  app: FirebaseApp,\n  isTokenAutoRefreshEnabled: boolean\n): void {\n  const state = getState(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  setState(app, { ...state, isTokenAutoRefreshEnabled });\n}\n\n/**\n * Differs from internal getToken in that it throws the error.\n */\nexport async function getToken(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  forceRefresh?: boolean\n): Promise<AppCheckTokenResult> {\n  const result = await getTokenInternal(\n    app,\n    platformLoggerProvider,\n    forceRefresh\n  );\n  if (result.error) {\n    throw result.error;\n  }\n  return { token: result.token };\n}\n\n/**\n * Wraps addTokenListener/removeTokenListener methods in an Observer\n * pattern for public use.\n */\nexport function onTokenChanged(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  observer: PartialObserver<AppCheckTokenResult>\n): Unsubscribe;\nexport function onTokenChanged(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  onNext: (tokenResult: AppCheckTokenResult) => void,\n  onError?: (error: Error) => void,\n  onCompletion?: () => void\n): Unsubscribe;\nexport function onTokenChanged(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  onNextOrObserver:\n    | ((tokenResult: AppCheckTokenResult) => void)\n    | PartialObserver<AppCheckTokenResult>,\n  onError?: (error: Error) => void,\n  /**\n   * NOTE: Although an `onCompletion` callback can be provided, it will\n   * never be called because the token stream is never-ending.\n   * It is added only for API consistency with the observer pattern, which\n   * we follow in JS APIs.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onCompletion?: () => void\n): Unsubscribe {\n  let nextFn: NextFn<AppCheckTokenResult> = () => {};\n  let errorFn: ErrorFn = () => {};\n  if ((onNextOrObserver as PartialObserver<AppCheckTokenResult>).next != null) {\n    nextFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).next!.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver as NextFn<AppCheckTokenResult>;\n  }\n  if (\n    (onNextOrObserver as PartialObserver<AppCheckTokenResult>).error != null\n  ) {\n    errorFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).error!.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(\n    app,\n    platformLoggerProvider,\n    ListenerType.EXTERNAL,\n    nextFn,\n    errorFn\n  );\n  return () => removeTokenListener(app, nextFn);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAppCheck,\n  AppCheckProvider,\n  AppCheckTokenResult,\n  ReCaptchaV3Provider,\n  CustomProvider\n} from '@firebase/app-check-types';\nimport {\n  activate,\n  setTokenAutoRefreshEnabled,\n  getToken,\n  onTokenChanged\n} from './api';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseAppCheckInternal } from '@firebase/app-check-interop-types';\nimport {\n  getToken as getTokenInternal,\n  addTokenListener,\n  removeTokenListener\n} from './internal-api';\nimport {\n  ReCaptchaV3Provider as ReCaptchaV3ProviderImpl,\n  CustomProvider as CustomProviderImpl\n} from './providers';\nimport { Provider } from '@firebase/component';\nimport { PartialObserver } from '@firebase/util';\n\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { getState, ListenerType } from './state';\n\nexport function factory(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): FirebaseAppCheck & FirebaseService {\n  return {\n    app,\n    activate: (\n      siteKeyOrProvider:\n        | ReCaptchaV3Provider\n        | CustomProvider\n        | AppCheckProvider\n        | string,\n      isTokenAutoRefreshEnabled?: boolean\n    ) =>\n      activate(\n        app,\n        // Public types of ReCaptchaV3Provider/CustomProvider don't\n        // expose getToken() and aren't recognized as the internal\n        // class version of themselves.\n        siteKeyOrProvider as\n          | ReCaptchaV3ProviderImpl\n          | CustomProviderImpl\n          | AppCheckProvider\n          | string,\n        platformLoggerProvider,\n        isTokenAutoRefreshEnabled\n      ),\n    setTokenAutoRefreshEnabled: (isTokenAutoRefreshEnabled: boolean) =>\n      setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled),\n    getToken: forceRefresh =>\n      getToken(app, platformLoggerProvider, forceRefresh),\n    onTokenChanged: (\n      onNextOrObserver:\n        | ((tokenResult: AppCheckTokenResult) => void)\n        | PartialObserver<AppCheckTokenResult>,\n      onError?: (error: Error) => void,\n      onCompletion?: () => void\n    ) =>\n      onTokenChanged(\n        app,\n        platformLoggerProvider,\n        /**\n         * This can still be an observer. Need to do this casting because\n         * according to Typescript: \"Implementation signatures of overloads\n         * are not externally visible\"\n         */\n        onNextOrObserver as (tokenResult: AppCheckTokenResult) => void,\n        onError,\n        onCompletion\n      ),\n    INTERNAL: {\n      delete: () => {\n        const { tokenObservers } = getState(app);\n        for (const tokenObserver of tokenObservers) {\n          removeTokenListener(app, tokenObserver.next);\n        }\n        return Promise.resolve();\n      }\n    }\n  };\n}\n\nexport function internalFactory(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): FirebaseAppCheckInternal {\n  return {\n    getToken: forceRefresh =>\n      getTokenInternal(app, platformLoggerProvider, forceRefresh),\n    addTokenListener: listener =>\n      addTokenListener(\n        app,\n        platformLoggerProvider,\n        ListenerType.INTERNAL,\n        listener\n      ),\n    removeTokenListener: listener => removeTokenListener(app, listener)\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport {\n  FirebaseAppCheck,\n  AppCheckComponentName,\n  ReCaptchaV3Provider,\n  CustomProvider\n} from '@firebase/app-check-types';\nimport { factory, internalFactory } from './factory';\nimport {\n  ReCaptchaV3Provider as ReCaptchaV3ProviderImpl,\n  CustomProvider as CustomProviderImpl\n} from './providers';\nimport { initializeDebugMode } from './debug';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { name, version } from '../package.json';\n\nconst APP_CHECK_NAME: AppCheckComponentName = 'appCheck';\nconst APP_CHECK_NAME_INTERNAL: AppCheckInternalComponentName =\n  'app-check-internal';\nfunction registerAppCheck(firebase: _FirebaseNamespace): void {\n  // The public interface\n  firebase.INTERNAL.registerComponent(\n    new Component(\n      APP_CHECK_NAME,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        return factory(app, platformLoggerProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps({\n        ReCaptchaV3Provider: ReCaptchaV3ProviderImpl,\n        CustomProvider: CustomProviderImpl\n      })\n      /**\n       * AppCheck can only be initialized by explicitly calling firebase.appCheck()\n       * We don't want firebase products that consume AppCheck to gate on AppCheck\n       * if the user doesn't intend them to, just because the AppCheck component\n       * is registered.\n       */\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Because all firebase products that depend on app-check depend on app-check-internal directly,\n       * we need to initialize app-check-internal after app-check is initialized to make it\n       * available to other firebase products.\n       */\n      .setInstanceCreatedCallback(\n        (container, _instanceIdentifier, _instance) => {\n          const appCheckInternalProvider = container.getProvider(\n            APP_CHECK_NAME_INTERNAL\n          );\n          appCheckInternalProvider.initialize();\n        }\n      )\n  );\n\n  // The internal interface used by other Firebase products\n  firebase.INTERNAL.registerComponent(\n    new Component(\n      APP_CHECK_NAME_INTERNAL,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        return internalFactory(app, platformLoggerProvider);\n      },\n      ComponentType.PUBLIC\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  firebase.registerVersion(name, version);\n}\n\nregisterAppCheck(firebase as _FirebaseNamespace);\ninitializeDebugMode();\n\n/**\n * Define extension behavior of `registerAnalytics`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    appCheck(app?: FirebaseApp): FirebaseAppCheck;\n    ReCaptchaV3Provider: typeof ReCaptchaV3Provider;\n    CustomProvider: typeof CustomProvider;\n  }\n  interface FirebaseApp {\n    appCheck(): FirebaseAppCheck;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}