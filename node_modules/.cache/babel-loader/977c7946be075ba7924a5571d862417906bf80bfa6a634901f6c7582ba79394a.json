{"ast":null,"code":"import firebase from '@firebase/app';\nimport { __extends, __spreadArray, __awaiter, __generator, __assign } from 'tslib';\nimport { FirebaseError, createMockUserToken, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n/**\r\n * Domain name for firebase storage.\r\n */\nvar DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\nvar CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\nvar DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\nvar DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\nvar FirebaseStorageError = /** @class */function (_super) {\n  __extends(FirebaseStorageError, _super);\n  /**\r\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\r\n   *  added to the end of the message.\r\n   * @param message  - Error message.\r\n   */\n  function FirebaseStorageError(code, message) {\n    var _this = _super.call(this, prependCode(code), \"Firebase Storage: \" + message + \" (\" + prependCode(code) + \")\") || this;\n    /**\r\n     * Stores custom error data unque to FirebaseStorageError.\r\n     */\n    _this.customData = {\n      serverResponse: null\n    };\n    _this._baseMessage = _this.message;\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(_this, FirebaseStorageError.prototype);\n    return _this;\n  }\n  /**\r\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\r\n   */\n  FirebaseStorageError.prototype._codeEquals = function (code) {\n    return prependCode(code) === this.code;\n  };\n  Object.defineProperty(FirebaseStorageError.prototype, \"serverResponse\", {\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\n    get: function () {\n      return this.customData.serverResponse;\n    },\n    set: function (serverResponse) {\n      this.customData.serverResponse = serverResponse;\n      if (this.customData.serverResponse) {\n        this.message = this._baseMessage + \"\\n\" + this.customData.serverResponse;\n      } else {\n        this.message = this._baseMessage;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return FirebaseStorageError;\n}(FirebaseError);\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\nfunction unknown() {\n  var message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new FirebaseStorageError(\"unknown\" /* UNKNOWN */, message);\n}\nfunction objectNotFound(path) {\n  return new FirebaseStorageError(\"object-not-found\" /* OBJECT_NOT_FOUND */, \"Object '\" + path + \"' does not exist.\");\n}\nfunction quotaExceeded(bucket) {\n  return new FirebaseStorageError(\"quota-exceeded\" /* QUOTA_EXCEEDED */, \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\nfunction unauthenticated() {\n  var message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new FirebaseStorageError(\"unauthenticated\" /* UNAUTHENTICATED */, message);\n}\nfunction unauthorizedApp() {\n  return new FirebaseStorageError(\"unauthorized-app\" /* UNAUTHORIZED_APP */, 'This app does not have permission to access Firebase Storage on this project.');\n}\nfunction unauthorized(path) {\n  return new FirebaseStorageError(\"unauthorized\" /* UNAUTHORIZED */, \"User does not have permission to access '\" + path + \"'.\");\n}\nfunction retryLimitExceeded() {\n  return new FirebaseStorageError(\"retry-limit-exceeded\" /* RETRY_LIMIT_EXCEEDED */, 'Max retry time for operation exceeded, please try again.');\n}\nfunction canceled() {\n  return new FirebaseStorageError(\"canceled\" /* CANCELED */, 'User canceled the upload/download.');\n}\nfunction invalidUrl(url) {\n  return new FirebaseStorageError(\"invalid-url\" /* INVALID_URL */, \"Invalid URL '\" + url + \"'.\");\n}\nfunction invalidDefaultBucket(bucket) {\n  return new FirebaseStorageError(\"invalid-default-bucket\" /* INVALID_DEFAULT_BUCKET */, \"Invalid default bucket '\" + bucket + \"'.\");\n}\nfunction noDefaultBucket() {\n  return new FirebaseStorageError(\"no-default-bucket\" /* NO_DEFAULT_BUCKET */, 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\nfunction cannotSliceBlob() {\n  return new FirebaseStorageError(\"cannot-slice-blob\" /* CANNOT_SLICE_BLOB */, 'Cannot slice blob for upload. Please retry the upload.');\n}\nfunction serverFileWrongSize() {\n  return new FirebaseStorageError(\"server-file-wrong-size\" /* SERVER_FILE_WRONG_SIZE */, 'Server recorded incorrect upload file size, please retry the upload.');\n}\nfunction noDownloadURL() {\n  return new FirebaseStorageError(\"no-download-url\" /* NO_DOWNLOAD_URL */, 'The given file does not have any download URLs.');\n}\nfunction invalidArgument(message) {\n  return new FirebaseStorageError(\"invalid-argument\" /* INVALID_ARGUMENT */, message);\n}\nfunction appDeleted() {\n  return new FirebaseStorageError(\"app-deleted\" /* APP_DELETED */, 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n */\nfunction invalidRootOperation(name) {\n  return new FirebaseStorageError(\"invalid-root-operation\" /* INVALID_ROOT_OPERATION */, \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\nfunction invalidFormat(format, message) {\n  return new FirebaseStorageError(\"invalid-format\" /* INVALID_FORMAT */, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\nfunction internalError(message) {\n  throw new FirebaseStorageError(\"internal-error\" /* INTERNAL_ERROR */, 'Internal error: ' + message);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Converts a Base64 encoded string to a binary string. */\nfunction decodeBase64(encoded) {\n  return atob(encoded);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\nvar StringFormat = {\n  /**\r\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n   * sequence.\r\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n   */\n  RAW: 'raw',\n  /**\r\n   * Indicates the string should be interpreted as base64-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64: 'base64',\n  /**\r\n   * Indicates the string should be interpreted as base64url-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64URL: 'base64url',\n  /**\r\n   * Indicates the string is a data URL, such as one obtained from\r\n   * canvas.toDataURL().\r\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n   * becomes the byte sequence\r\n   * 69 a6 9a\r\n   * (the content-type \"application/octet-stream\" is also applied, but can\r\n   * be overridden in the metadata object).\r\n   */\n  DATA_URL: 'data_url'\n};\nvar StringData = /** @class */function () {\n  function StringData(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n  return StringData;\n}();\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  }\n  // assert(false);\n  throw unknown();\n}\nfunction utf8Bytes_(value) {\n  var b = [];\n  for (var i = 0; i < value.length; i++) {\n    var c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            var hi = c;\n            var lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\nfunction percentEncodedBytes_(value) {\n  var decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        var hasMinus = value.indexOf('-') !== -1;\n        var hasUnder = value.indexOf('_') !== -1;\n        if (hasMinus || hasUnder) {\n          var invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n        break;\n      }\n    case StringFormat.BASE64URL:\n      {\n        var hasPlus = value.indexOf('+') !== -1;\n        var hasSlash = value.indexOf('/') !== -1;\n        if (hasPlus || hasSlash) {\n          var invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  var bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  var array = new Uint8Array(bytes.length);\n  for (var i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\nvar DataURLParts = /** @class */function () {\n  function DataURLParts(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    var matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n    var middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n  return DataURLParts;\n}();\nfunction dataURLBytes_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\nfunction dataURLContentType_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\nfunction endsWith(s, end) {\n  var longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n  return s.substring(s.length - end.length) === end;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An event that is triggered on a task.\r\n */\nvar TaskEvent = {\n  /**\r\n   * For this event,\r\n   * <ul>\r\n   *   <li>The `next` function is triggered on progress updates and when the\r\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n   *       argument.</li>\r\n   *   <li>The `error` function is triggered if the upload is canceled or fails\r\n   *       for another reason.</li>\r\n   *   <li>The `complete` function is triggered if the upload completes\r\n   *       successfully.</li>\r\n   * </ul>\r\n   */\n  STATE_CHANGED: 'state_changed'\n};\n/**\r\n * Represents the current state of a running upload.\r\n */\nvar TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\" /* RUNNING */:\n    case \"pausing\" /* PAUSING */:\n    case \"canceling\" /* CANCELING */:\n      return TaskState.RUNNING;\n    case \"paused\" /* PAUSED */:\n      return TaskState.PAUSED;\n    case \"success\" /* SUCCESS */:\n      return TaskState.SUCCESS;\n    case \"canceled\" /* CANCELED */:\n      return TaskState.CANCELED;\n    case \"error\" /* ERROR */:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\nvar ErrorCode;\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\nvar XhrConnection = /** @class */function () {\n  function XhrConnection() {\n    var _this = this;\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(function (resolve) {\n      _this.xhr_.addEventListener('abort', function () {\n        _this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      _this.xhr_.addEventListener('error', function () {\n        _this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      _this.xhr_.addEventListener('load', function () {\n        resolve();\n      });\n    });\n  }\n  /**\r\n   * @override\r\n   */\n  XhrConnection.prototype.send = function (url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (var key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  };\n  /**\r\n   * @override\r\n   */\n  XhrConnection.prototype.getErrorCode = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  };\n  /**\r\n   * @override\r\n   */\n  XhrConnection.prototype.getStatus = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  };\n  /**\r\n   * @override\r\n   */\n  XhrConnection.prototype.getResponseText = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  };\n  /**\r\n   * Aborts the request.\r\n   * @override\r\n   */\n  XhrConnection.prototype.abort = function () {\n    this.xhr_.abort();\n  };\n  /**\r\n   * @override\r\n   */\n  XhrConnection.prototype.getResponseHeader = function (header) {\n    return this.xhr_.getResponseHeader(header);\n  };\n  /**\r\n   * @override\r\n   */\n  XhrConnection.prototype.addUploadProgressListener = function (listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  };\n  /**\r\n   * @override\r\n   */\n  XhrConnection.prototype.removeUploadProgressListener = function (listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  };\n  return XhrConnection;\n}();\nfunction newConnection() {\n  return new XhrConnection();\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Factory-like class for creating XhrIo instances.\r\n */\nvar ConnectionPool = /** @class */function () {\n  function ConnectionPool() {}\n  ConnectionPool.prototype.createConnection = function () {\n    return newConnection();\n  };\n  return ConnectionPool;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\nvar Location = /** @class */function () {\n  function Location(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n  Object.defineProperty(Location.prototype, \"path\", {\n    get: function () {\n      return this.path_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Location.prototype, \"isRoot\", {\n    get: function () {\n      return this.path.length === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Location.prototype.fullServerUrl = function () {\n    var encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  };\n  Location.prototype.bucketOnlyServerUrl = function () {\n    var encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  };\n  Location.makeFromBucketSpec = function (bucketString, host) {\n    var bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  };\n  Location.makeFromUrl = function (url, host) {\n    var location = null;\n    var bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    var gsPath = '(/(.*))?$';\n    var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    var gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    var version = 'v[A-Za-z0-9_]+';\n    var firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    var firebaseStoragePath = '(/([^?#]*).*)?$';\n    var firebaseStorageRegExp = new RegExp(\"^https?://\" + firebaseStorageHost + \"/\" + version + \"/b/\" + bucketDomain + \"/o\" + firebaseStoragePath, 'i');\n    var firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    var cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;\n    var cloudStoragePath = '([^?#]*)';\n    var cloudStorageRegExp = new RegExp(\"^https?://\" + cloudStorageHost + \"/\" + bucketDomain + \"/\" + cloudStoragePath, 'i');\n    var cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    var groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n    for (var i = 0; i < groups.length; i++) {\n      var group = groups[i];\n      var captures = group.regex.exec(url);\n      if (captures) {\n        var bucketValue = captures[group.indices.bucket];\n        var pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  };\n  return Location;\n}();\n\n/**\r\n * A request whose promise always fails.\r\n */\nvar FailRequest = /** @class */function () {\n  function FailRequest(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n  FailRequest.prototype.getPromise = function () {\n    return this.promise_;\n  };\n  /** @inheritDoc */\n  FailRequest.prototype.cancel = function (_appDelete) {};\n  return FailRequest;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\nfunction start(f,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ncallback, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  var waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var timeoutId = null;\n  var hitTimeout = false;\n  var cancelState = 0;\n  function canceled() {\n    return cancelState === 2;\n  }\n  var triggeredCallback = false;\n  function triggerCallback() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n  function callWithDelay(millis) {\n    timeoutId = setTimeout(function () {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n  function handler(success) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call.apply(triggerCallback, __spreadArray([null, success], args));\n      return;\n    }\n    var mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call.apply(triggerCallback, __spreadArray([null, success], args));\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    var waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  var stopped = false;\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(function () {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\nfunction stop(id) {\n  id(false);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isJustDef(p) {\n  return p !== void 0;\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\nfunction isNativeBlobDefined() {\n  return typeof Blob !== 'undefined';\n}\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(\"Invalid value for '\" + argument + \"'. Expected \" + minValue + \" or greater.\");\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\"Invalid value for '\" + argument + \"'. Expected \" + maxValue + \" or less.\");\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction makeUrl(urlPart, host) {\n  var protocolMatch = host.match(/^(\\w+):\\/\\/.+/);\n  var protocol = protocolMatch === null || protocolMatch === void 0 ? void 0 : protocolMatch[1];\n  var origin = host;\n  if (protocol == null) {\n    origin = \"https://\" + host;\n  }\n  return origin + \"/v0\" + urlPart;\n}\nfunction makeQueryString(params) {\n  var encode = encodeURIComponent;\n  var queryPart = '?';\n  for (var key in params) {\n    if (params.hasOwnProperty(key)) {\n      var nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar NetworkRequest = /** @class */function () {\n  function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {\n    var _this = this;\n    this.pendingConnection_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise(function (resolve, reject) {\n      _this.resolve_ = resolve;\n      _this.reject_ = reject;\n      _this.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n  NetworkRequest.prototype.start_ = function () {\n    var self = this;\n    function doTheRequest(backoffCallback, canceled) {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      var connection = self.pool_.createConnection();\n      self.pendingConnection_ = connection;\n      function progressListener(progressEvent) {\n        var loaded = progressEvent.loaded;\n        var total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection.send(self.url_, self.method_, self.body_, self.headers_).then(function () {\n        if (self.progressCallback_ !== null) {\n          connection.removeUploadProgressListener(progressListener);\n        }\n        self.pendingConnection_ = null;\n        var hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n        var status = connection.getStatus();\n        if (!hitServer || self.isRetryStatusCode_(status)) {\n          var wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n        var successCode = self.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, connection));\n      });\n    }\n    /**\r\n     * @param requestWentThrough - True if the request eventually went\r\n     *     through, false if it hit the retry limit or was canceled.\r\n     */\n    function backoffDone(requestWentThrough, status) {\n      var resolve = self.resolve_;\n      var reject = self.reject_;\n      var connection = status.connection;\n      if (status.wasSuccessCode) {\n        try {\n          var result = self.callback_(connection, connection.getResponseText());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          var err = unknown();\n          err.serverResponse = connection.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            var err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            var err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  };\n  /** @inheritDoc */\n  NetworkRequest.prototype.getPromise = function () {\n    return this.promise_;\n  };\n  /** @inheritDoc */\n  NetworkRequest.prototype.cancel = function (appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  };\n  NetworkRequest.prototype.isRetryStatusCode_ = function (status) {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    var isFiveHundredCode = status >= 500 && status < 600;\n    var extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429];\n    var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    var isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  };\n  return NetworkRequest;\n}();\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\nvar RequestEndStatus = /** @class */function () {\n  function RequestEndStatus(wasSuccessCode, connection, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.connection = connection;\n    this.canceled = !!canceled;\n  }\n  return RequestEndStatus;\n}();\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\nfunction addAppCheckHeader_(headers, appCheckToken) {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, pool, firebaseVersion) {\n  var queryPart = makeQueryString(requestInfo.urlParams);\n  var url = requestInfo.url + queryPart;\n  var headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\nfunction getBlob() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    var bb = new BlobBuilder();\n    for (var i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\"unsupported-environment\" /* UNSUPPORTED_ENVIRONMENT */, \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\nvar FbsBlob = /** @class */function () {\n  function FbsBlob(data, elideCopy) {\n    var size = 0;\n    var blobType = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n  FbsBlob.prototype.size = function () {\n    return this.size_;\n  };\n  FbsBlob.prototype.type = function () {\n    return this.type_;\n  };\n  FbsBlob.prototype.slice = function (startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      var realBlob = this.data_;\n      var sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  };\n  FbsBlob.getBlob = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (isNativeBlobDefined()) {\n      var blobby = args.map(function (val) {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      var uint8Arrays = args.map(function (val) {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      var finalLength_1 = 0;\n      uint8Arrays.forEach(function (array) {\n        finalLength_1 += array.byteLength;\n      });\n      var merged_1 = new Uint8Array(finalLength_1);\n      var index_1 = 0;\n      uint8Arrays.forEach(function (array) {\n        for (var i = 0; i < array.length; i++) {\n          merged_1[index_1++] = array[i];\n        }\n      });\n      return new FbsBlob(merged_1, true);\n    }\n  };\n  FbsBlob.prototype.uploadData = function () {\n    return this.data_;\n  };\n  return FbsBlob;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\nfunction jsonObjectOrNull(s) {\n  var obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n/**\r\n * @return Null if the path is already at the root.\r\n */\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n  var index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  var newPath = path.slice(0, index);\n  return newPath;\n}\nfunction child(path, childPath) {\n  var canonicalChildPath = childPath.split('/').filter(function (component) {\n    return component.length > 0;\n  }).join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\nfunction lastComponent(path) {\n  var index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction noXform_(metadata, value) {\n  return value;\n}\nvar Mapping = /** @class */function () {\n  function Mapping(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n  return Mapping;\n}();\nvar mappings_ = null;\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n  var mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n  var nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  var sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\nfunction addRef(metadata, service) {\n  function generateRef() {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\nfunction fromResource(service, resource, mappings) {\n  var metadata = {};\n  metadata['type'] = 'file';\n  var len = mappings.length;\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n  addRef(metadata, service);\n  return metadata;\n}\nfunction fromResourceString(service, resourceString, mappings) {\n  var obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  var resource = obj;\n  return fromResource(service, resource, mappings);\n}\nfunction downloadUrlFromResourceString(metadata, resourceString, host) {\n  var obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  var tokens = obj['downloadTokens'];\n  if (tokens.length === 0) {\n    return null;\n  }\n  var encode = encodeURIComponent;\n  var tokensList = tokens.split(',');\n  var urls = tokensList.map(function (token) {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    var base = makeUrl(urlPart, host);\n    var queryString = makeQueryString({\n      alt: 'media',\n      token: token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\nfunction toResourceString(metadata, mappings) {\n  var resource = {};\n  var len = mappings.length;\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar PREFIXES_KEY = 'prefixes';\nvar ITEMS_KEY = 'items';\nfunction fromBackendResponse(service, bucket, resource) {\n  var listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (var _i = 0, _a = resource[PREFIXES_KEY]; _i < _a.length; _i++) {\n      var path = _a[_i];\n      var pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      var reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n      listResult.prefixes.push(reference);\n    }\n  }\n  if (resource[ITEMS_KEY]) {\n    for (var _b = 0, _c = resource[ITEMS_KEY]; _b < _c.length; _b++) {\n      var item = _c[_b];\n      var reference = service._makeStorageReference(new Location(bucket, item['name']));\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\nfunction fromResponseString(service, bucket, resourceString) {\n  var obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  var resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\nvar RequestInfo = /** @class */function () {\n  function RequestInfo(url, method,\n  /**\r\n   * Returns the value with which to resolve the request's promise. Only called\r\n   * if the request is successful. Throw from this function to reject the\r\n   * returned Request's promise with the thrown error.\r\n   * Note: The XhrIo passed to this function may be reused after this callback\r\n   * returns. Do not keep a reference to it in any way.\r\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\r\n     * Called with the current number of bytes uploaded and total size (-1 if not\r\n     * computable) of the request body (i.e. used to report upload progress).\r\n     */\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n  return RequestInfo;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\r\n */\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n  return handler;\n}\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    var listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n  return handler;\n}\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text, service.host);\n  }\n  return handler;\n}\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    var newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n      // This exact message string is the only consistent part of the\n      // server's error response that identifies it as an App Check error.\n      xhr.getResponseText().includes('Firebase App Check token is invalid')) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction objectErrorHandler(location) {\n  var shared = sharedErrorHandler(location);\n  function errorHandler(xhr, err) {\n    var newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction getMetadata$2(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n  var urlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  var urlPart = location.bucketOnlyServerUrl();\n  var url = makeUrl(urlPart, service.host);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\nfunction getDownloadUrl(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction updateMetadata$2(service, location, metadata, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host);\n  var method = 'PATCH';\n  var body = toResourceString(metadata, mappings);\n  var headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction deleteObject$2(service, location) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host);\n  var method = 'DELETE';\n  var timeout = service.maxOperationRetryTime;\n  function handler(_xhr, _text) {}\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\nfunction metadataForUpload_(location, blob, metadata) {\n  var metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n  function genBoundary() {\n    var str = '';\n    for (var i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  var boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  var metadata_ = metadataForUpload_(location, blob, metadata);\n  var metadataString = toResourceString(metadata_, mappings);\n  var preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  var postBlobPart = '\\r\\n--' + boundary + '--';\n  var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  var urlParams = {\n    name: metadata_['fullPath']\n  };\n  var url = makeUrl(urlPart, service.host);\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\nvar ResumableUploadStatus = /** @class */function () {\n  function ResumableUploadStatus(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n  return ResumableUploadStatus;\n}();\nfunction checkResumeHeader_(xhr, allowed) {\n  var status = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  var allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var metadataForUpload = metadataForUpload_(location, blob, metadata);\n  var urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  var url = makeUrl(urlPart, service.host);\n  var method = 'POST';\n  var headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': \"\" + blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var body = toResourceString(metadataForUpload, mappings);\n  var timeout = service.maxUploadRetryTime;\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    var url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url;\n  }\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\nfunction getResumableUploadStatus(service, location, url, blob) {\n  var headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n  function handler(xhr) {\n    var status = checkResumeHeader_(xhr, ['active', 'final']);\n    var sizeString = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n    var size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\nvar RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  var status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  var bytesLeft = status_.total - status_.current;\n  var bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  var startByte = status_.current;\n  var endByte = startByte + bytesToUpload;\n  var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  var headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': \"\" + status_.current\n  };\n  var body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    var newCurrent = status_.current + bytesToUpload;\n    var size = blob.size();\n    var metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar Observer = /** @class */function () {\n  function Observer(nextOrObserver, error, complete) {\n    var asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      var observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n  return Observer;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction async(f) {\n  return function () {\n    var argsToForward = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      argsToForward[_i] = arguments[_i];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(function () {\n      return f.apply(void 0, argsToForward);\n    });\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\nvar UploadTask = /** @class */function () {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  function UploadTask(ref, blob, metadata) {\n    var _this = this;\n    if (metadata === void 0) {\n      metadata = null;\n    }\n    /**\r\n     * Number of bytes transferred so far.\r\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\" /* RUNNING */;\n    this._errorHandler = function (error) {\n      _this._request = undefined;\n      _this._chunkMultiplier = 1;\n      if (error._codeEquals(\"canceled\" /* CANCELED */)) {\n        _this._needToFetchStatus = true;\n        _this.completeTransitions_();\n      } else {\n        _this._error = error;\n        _this._transition(\"error\" /* ERROR */);\n      }\n    };\n\n    this._metadataErrorHandler = function (error) {\n      _this._request = undefined;\n      if (error._codeEquals(\"canceled\" /* CANCELED */)) {\n        _this.completeTransitions_();\n      } else {\n        _this._error = error;\n        _this._transition(\"error\" /* ERROR */);\n      }\n    };\n\n    this._promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n      _this._start();\n    });\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, function () {});\n  }\n  UploadTask.prototype._makeProgressCallback = function () {\n    var _this = this;\n    var sizeBefore = this._transferred;\n    return function (loaded) {\n      return _this._updateProgress(sizeBefore + loaded);\n    };\n  };\n  UploadTask.prototype._shouldDoResumable = function (blob) {\n    return blob.size() > 256 * 1024;\n  };\n  UploadTask.prototype._start = function () {\n    if (this._state !== \"running\" /* RUNNING */) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  };\n  UploadTask.prototype._resolveToken = function (callback) {\n    var _this = this;\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([this._ref.storage._getAuthToken(), this._ref.storage._getAppCheckToken()]).then(function (_a) {\n      var authToken = _a[0],\n        appCheckToken = _a[1];\n      switch (_this._state) {\n        case \"running\" /* RUNNING */:\n          callback(authToken, appCheckToken);\n          break;\n        case \"canceling\" /* CANCELING */:\n          _this._transition(\"canceled\" /* CANCELED */);\n          break;\n        case \"pausing\" /* PAUSING */:\n          _this._transition(\"paused\" /* PAUSED */);\n          break;\n      }\n    });\n  };\n  // TODO(andysoto): assert false\n  UploadTask.prototype._createResumable = function () {\n    var _this = this;\n    this._resolveToken(function (authToken, appCheckToken) {\n      var requestInfo = createResumableUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);\n      var createRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\n      _this._request = createRequest;\n      createRequest.getPromise().then(function (url) {\n        _this._request = undefined;\n        _this._uploadUrl = url;\n        _this._needToFetchStatus = false;\n        _this.completeTransitions_();\n      }, _this._errorHandler);\n    });\n  };\n  UploadTask.prototype._fetchStatus = function () {\n    var _this = this;\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    var url = this._uploadUrl;\n    this._resolveToken(function (authToken, appCheckToken) {\n      var requestInfo = getResumableUploadStatus(_this._ref.storage, _this._ref._location, url, _this._blob);\n      var statusRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\n      _this._request = statusRequest;\n      statusRequest.getPromise().then(function (status) {\n        status = status;\n        _this._request = undefined;\n        _this._updateProgress(status.current);\n        _this._needToFetchStatus = false;\n        if (status.finalized) {\n          _this._needToFetchMetadata = true;\n        }\n        _this.completeTransitions_();\n      }, _this._errorHandler);\n    });\n  };\n  UploadTask.prototype._continueUpload = function () {\n    var _this = this;\n    var chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    var status = new ResumableUploadStatus(this._transferred, this._blob.size());\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    var url = this._uploadUrl;\n    this._resolveToken(function (authToken, appCheckToken) {\n      var requestInfo;\n      try {\n        requestInfo = continueResumableUpload(_this._ref._location, _this._ref.storage, url, _this._blob, chunkSize, _this._mappings, status, _this._makeProgressCallback());\n      } catch (e) {\n        _this._error = e;\n        _this._transition(\"error\" /* ERROR */);\n        return;\n      }\n      var uploadRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\n      _this._request = uploadRequest;\n      uploadRequest.getPromise().then(function (newStatus) {\n        _this._increaseMultiplier();\n        _this._request = undefined;\n        _this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          _this._metadata = newStatus.metadata;\n          _this._transition(\"success\" /* SUCCESS */);\n        } else {\n          _this.completeTransitions_();\n        }\n      }, _this._errorHandler);\n    });\n  };\n  UploadTask.prototype._increaseMultiplier = function () {\n    var currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  };\n  UploadTask.prototype._fetchMetadata = function () {\n    var _this = this;\n    this._resolveToken(function (authToken, appCheckToken) {\n      var requestInfo = getMetadata$2(_this._ref.storage, _this._ref._location, _this._mappings);\n      var metadataRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\n      _this._request = metadataRequest;\n      metadataRequest.getPromise().then(function (metadata) {\n        _this._request = undefined;\n        _this._metadata = metadata;\n        _this._transition(\"success\" /* SUCCESS */);\n      }, _this._metadataErrorHandler);\n    });\n  };\n  UploadTask.prototype._oneShotUpload = function () {\n    var _this = this;\n    this._resolveToken(function (authToken, appCheckToken) {\n      var requestInfo = multipartUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);\n      var multipartRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\n      _this._request = multipartRequest;\n      multipartRequest.getPromise().then(function (metadata) {\n        _this._request = undefined;\n        _this._metadata = metadata;\n        _this._updateProgress(_this._blob.size());\n        _this._transition(\"success\" /* SUCCESS */);\n      }, _this._errorHandler);\n    });\n  };\n  UploadTask.prototype._updateProgress = function (transferred) {\n    var old = this._transferred;\n    this._transferred = transferred;\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  };\n  UploadTask.prototype._transition = function (state) {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case \"canceling\" /* CANCELING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case \"pausing\" /* PAUSING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case \"running\" /* RUNNING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        var wasPaused = this._state === \"paused\" /* PAUSED */;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case \"paused\" /* PAUSED */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"canceled\" /* CANCELED */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"error\" /* ERROR */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"success\" /* SUCCESS */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n    }\n  };\n  UploadTask.prototype.completeTransitions_ = function () {\n    switch (this._state) {\n      case \"pausing\" /* PAUSING */:\n        this._transition(\"paused\" /* PAUSED */);\n        break;\n      case \"canceling\" /* CANCELING */:\n        this._transition(\"canceled\" /* CANCELED */);\n        break;\n      case \"running\" /* RUNNING */:\n        this._start();\n        break;\n    }\n  };\n  Object.defineProperty(UploadTask.prototype, \"snapshot\", {\n    /**\r\n     * A snapshot of the current task state.\r\n     */\n    get: function () {\n      var externalState = taskStateFromInternalTaskState(this._state);\n      return {\n        bytesTransferred: this._transferred,\n        totalBytes: this._blob.size(),\n        state: externalState,\n        metadata: this._metadata,\n        task: this,\n        ref: this._ref\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Adds a callback for an event.\r\n   * @param type - The type of event to listen for.\r\n   * @param nextOrObserver -\r\n   *     The `next` function, which gets called for each item in\r\n   *     the event stream, or an observer object with some or all of these three\r\n   *     properties (`next`, `error`, `complete`).\r\n   * @param error - A function that gets called with a `FirebaseStorageError`\r\n   *     if the event stream ends due to an error.\r\n   * @param completed - A function that gets called if the\r\n   *     event stream ends normally.\r\n   * @returns\r\n   *     If only the event argument is passed, returns a function you can use to\r\n   *     add callbacks (see the examples above). If more than just the event\r\n   *     argument is passed, returns a function you can call to unregister the\r\n   *     callbacks.\r\n   */\n  UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {\n    var _this = this;\n    var observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return function () {\n      _this._removeObserver(observer);\n    };\n  };\n  /**\r\n   * This object behaves like a Promise, and resolves with its snapshot data\r\n   * when the upload completes.\r\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n   * @param onRejected - The rejection callback.\r\n   */\n  UploadTask.prototype.then = function (onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  };\n  /**\r\n   * Equivalent to calling `then(null, onRejected)`.\r\n   */\n  UploadTask.prototype.catch = function (onRejected) {\n    return this.then(null, onRejected);\n  };\n  /**\r\n   * Adds the given observer.\r\n   */\n  UploadTask.prototype._addObserver = function (observer) {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  };\n  /**\r\n   * Removes the given observer.\r\n   */\n  UploadTask.prototype._removeObserver = function (observer) {\n    var i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  };\n  UploadTask.prototype._notifyObservers = function () {\n    var _this = this;\n    this._finishPromise();\n    var observers = this._observers.slice();\n    observers.forEach(function (observer) {\n      _this._notifyObserver(observer);\n    });\n  };\n  UploadTask.prototype._finishPromise = function () {\n    if (this._resolve !== undefined) {\n      var triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          var toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  };\n  UploadTask.prototype._notifyObserver = function (observer) {\n    var externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n    }\n  };\n  /**\r\n   * Resumes a paused task. Has no effect on a currently running or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  UploadTask.prototype.resume = function () {\n    var valid = this._state === \"paused\" /* PAUSED */ || this._state === \"pausing\" /* PAUSING */;\n    if (valid) {\n      this._transition(\"running\" /* RUNNING */);\n    }\n\n    return valid;\n  };\n  /**\r\n   * Pauses a currently running task. Has no effect on a paused or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  UploadTask.prototype.pause = function () {\n    var valid = this._state === \"running\" /* RUNNING */;\n    if (valid) {\n      this._transition(\"pausing\" /* PAUSING */);\n    }\n\n    return valid;\n  };\n  /**\r\n   * Cancels a currently running or paused task. Has no effect on a complete or\r\n   * failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  UploadTask.prototype.cancel = function () {\n    var valid = this._state === \"running\" /* RUNNING */ || this._state === \"pausing\" /* PAUSING */;\n    if (valid) {\n      this._transition(\"canceling\" /* CANCELING */);\n    }\n\n    return valid;\n  };\n  return UploadTask;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\nvar Reference = /** @class */function () {\n  function Reference(_service, location) {\n    this._service = _service;\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n  /**\r\n   * Returns the URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n  Reference.prototype.toString = function () {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  };\n  Reference.prototype._newRef = function (service, location) {\n    return new Reference(service, location);\n  };\n  Object.defineProperty(Reference.prototype, \"root\", {\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\n    get: function () {\n      var location = new Location(this._location.bucket, '');\n      return this._newRef(this._service, location);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"bucket\", {\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\n    get: function () {\n      return this._location.bucket;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"fullPath\", {\n    /**\r\n     * The full path of this object.\r\n     */\n    get: function () {\n      return this._location.path;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"name\", {\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\n    get: function () {\n      return lastComponent(this._location.path);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"storage\", {\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\n    get: function () {\n      return this._service;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\n    get: function () {\n      var newPath = parent(this._location.path);\n      if (newPath === null) {\n        return null;\n      }\n      var location = new Location(this._location.bucket, newPath);\n      return new Reference(this._service, location);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Utility function to throw an error in methods that do not accept a root reference.\r\n   */\n  Reference.prototype._throwIfRoot = function (name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  };\n  return Reference;\n}();\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\nfunction listAll$1(ref) {\n  var accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(function () {\n    return accumulator;\n  });\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\nfunction listAllHelper(ref, accumulator, pageToken) {\n  return __awaiter(this, void 0, void 0, function () {\n    var opt, nextPage;\n    var _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          opt = {\n            // maxResults is 1000 by default.\n            pageToken: pageToken\n          };\n          return [4 /*yield*/, list$1(ref, opt)];\n        case 1:\n          nextPage = _c.sent();\n          (_a = accumulator.prefixes).push.apply(_a, nextPage.prefixes);\n          (_b = accumulator.items).push.apply(_b, nextPage.items);\n          if (!(nextPage.nextPageToken != null)) return [3 /*break*/, 3];\n          return [4 /*yield*/, listAllHelper(ref, accumulator, nextPage.nextPageToken)];\n        case 2:\n          _c.sent();\n          _c.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\nfunction list$1(ref, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var op, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (options != null) {\n            if (typeof options.maxResults === 'number') {\n              validateNumber('options.maxResults', /* minValue= */1, /* maxValue= */1000, options.maxResults);\n            }\n          }\n          op = options || {};\n          requestInfo = list$2(ref.storage, ref._location, /*delimiter= */'/', op.pageToken, op.maxResults);\n          return [4 /*yield*/, ref.storage.makeRequestWithTokens(requestInfo)];\n        case 1:\n          return [2 /*return*/, _a.sent().getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\nfunction getMetadata$1(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('getMetadata');\n          requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n          return [4 /*yield*/, ref.storage.makeRequestWithTokens(requestInfo)];\n        case 1:\n          return [2 /*return*/, _a.sent().getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\nfunction updateMetadata$1(ref, metadata) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('updateMetadata');\n          requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n          return [4 /*yield*/, ref.storage.makeRequestWithTokens(requestInfo)];\n        case 1:\n          return [2 /*return*/, _a.sent().getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\nfunction getDownloadURL$1(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('getDownloadURL');\n          requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n          return [4 /*yield*/, ref.storage.makeRequestWithTokens(requestInfo)];\n        case 1:\n          return [2 /*return*/, _a.sent().getPromise().then(function (url) {\n            if (url === null) {\n              throw noDownloadURL();\n            }\n            return url;\n          })];\n      }\n    });\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\nfunction deleteObject$1(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('deleteObject');\n          requestInfo = deleteObject$2(ref.storage, ref._location);\n          return [4 /*yield*/, ref.storage.makeRequestWithTokens(requestInfo)];\n        case 1:\n          return [2 /*return*/, _a.sent().getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\nfunction _getChild$1(ref, childPath) {\n  var newPath = child(ref._location.path, childPath);\n  var location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\nfunction refFromPath(ref, path) {\n  if (ref instanceof FirebaseStorageImpl) {\n    var service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    var reference = new Reference(service, service._bucket);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild$1(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\nfunction extractBucket(host, config) {\n  var bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\nfunction connectStorageEmulator$1(storage, host, port, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  storage.host = \"http://\" + host + \":\" + port;\n  var mockUserToken = options.mockUserToken;\n  if (mockUserToken) {\n    storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @public\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n */\nvar FirebaseStorageImpl = /** @class */function () {\n  function FirebaseStorageImpl(\n  /**\r\n   * FirebaseApp associated with this StorageService instance.\r\n   */\n  app, _authProvider,\n  /**\r\n   * @internal\r\n   */\n  _appCheckProvider,\n  /**\r\n   * @internal\r\n   */\n  _pool, _url, _firebaseVersion) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._appCheckProvider = _appCheckProvider;\n    this._pool = _pool;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    /**\r\n     * This string can be in the formats:\r\n     * - host\r\n     * - host:port\r\n     * - protocol://host:port\r\n     */\n    this._host = DEFAULT_HOST;\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n  Object.defineProperty(FirebaseStorageImpl.prototype, \"host\", {\n    get: function () {\n      return this._host;\n    },\n    /**\r\n     * Set host string for this service.\r\n     * @param host - host string in the form of host, host:port,\r\n     * or protocol://host:port\r\n     */\n    set: function (host) {\n      this._host = host;\n      if (this._url != null) {\n        this._bucket = Location.makeFromBucketSpec(this._url, host);\n      } else {\n        this._bucket = extractBucket(host, this.app.options);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseStorageImpl.prototype, \"maxUploadRetryTime\", {\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\n    get: function () {\n      return this._maxUploadRetryTime;\n    },\n    set: function (time) {\n      validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n      this._maxUploadRetryTime = time;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseStorageImpl.prototype, \"maxOperationRetryTime\", {\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\n    get: function () {\n      return this._maxOperationRetryTime;\n    },\n    set: function (time) {\n      validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n      this._maxOperationRetryTime = time;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  FirebaseStorageImpl.prototype._getAuthToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var auth, tokenData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._overrideAuthToken) {\n              return [2 /*return*/, this._overrideAuthToken];\n            }\n            auth = this._authProvider.getImmediate({\n              optional: true\n            });\n            if (!auth) return [3 /*break*/, 2];\n            return [4 /*yield*/, auth.getToken()];\n          case 1:\n            tokenData = _a.sent();\n            if (tokenData !== null) {\n              return [2 /*return*/, tokenData.accessToken];\n            }\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, null];\n        }\n      });\n    });\n  };\n  FirebaseStorageImpl.prototype._getAppCheckToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var appCheck, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            appCheck = this._appCheckProvider.getImmediate({\n              optional: true\n            });\n            if (!appCheck) return [3 /*break*/, 2];\n            return [4 /*yield*/, appCheck.getToken()];\n          case 1:\n            result = _a.sent();\n            // TODO: What do we want to do if there is an error getting the token?\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n            // the token (actual or dummy) to send requests.\n            return [2 /*return*/, result.token];\n          case 2:\n            return [2 /*return*/, null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Stop running requests and prevent more from being created.\r\n   */\n  FirebaseStorageImpl.prototype._delete = function () {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(function (request) {\n        return request.cancel();\n      });\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  };\n  /**\r\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n   * at the given Location.\r\n   */\n  FirebaseStorageImpl.prototype._makeStorageReference = function (loc) {\n    return new Reference(this, loc);\n  };\n  /**\r\n   * @param requestInfo - HTTP RequestInfo object\r\n   * @param authToken - Firebase auth token\r\n   */\n  FirebaseStorageImpl.prototype._makeRequest = function (requestInfo, authToken, appCheckToken) {\n    var _this = this;\n    if (!this._deleted) {\n      var request_1 = makeRequest(requestInfo, this._appId, authToken, appCheckToken, this._pool, this._firebaseVersion);\n      this._requests.add(request_1);\n      // Request removes itself from set when complete.\n      request_1.getPromise().then(function () {\n        return _this._requests.delete(request_1);\n      }, function () {\n        return _this._requests.delete(request_1);\n      });\n      return request_1;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  };\n  FirebaseStorageImpl.prototype.makeRequestWithTokens = function (requestInfo) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, authToken, appCheckToken;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Promise.all([this._getAuthToken(), this._getAppCheckToken()])];\n          case 1:\n            _a = _b.sent(), authToken = _a[0], appCheckToken = _a[1];\n            return [2 /*return*/, this._makeRequest(requestInfo, authToken, appCheckToken)];\n        }\n      });\n    });\n  };\n  return FirebaseStorageImpl;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\nfunction getMetadata(ref) {\n  ref = getModularInstance(ref);\n  return getMetadata$1(ref);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\nfunction updateMetadata(ref, metadata) {\n  ref = getModularInstance(ref);\n  return updateMetadata$1(ref, metadata);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\nfunction list(ref, options) {\n  ref = getModularInstance(ref);\n  return list$1(ref, options);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\nfunction listAll(ref) {\n  ref = getModularInstance(ref);\n  return listAll$1(ref);\n}\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\nfunction getDownloadURL(ref) {\n  ref = getModularInstance(ref);\n  return getDownloadURL$1(ref);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\nfunction deleteObject(ref) {\n  ref = getModularInstance(ref);\n  return deleteObject$1(ref);\n}\nfunction ref(serviceOrRef, pathOrUrl) {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\r\n * @internal\r\n */\nfunction _getChild(ref, childPath) {\n  return _getChild$1(ref, childPath);\n}\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules.\r\n * @public\r\n */\nfunction connectStorageEmulator(storage, host, port, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  connectStorageEmulator$1(storage, host, port, options);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar UploadTaskSnapshotCompat = /** @class */function () {\n  function UploadTaskSnapshotCompat(_delegate, task, ref) {\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"bytesTransferred\", {\n    get: function () {\n      return this._delegate.bytesTransferred;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"metadata\", {\n    get: function () {\n      return this._delegate.metadata;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"state\", {\n    get: function () {\n      return this._delegate.state;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"totalBytes\", {\n    get: function () {\n      return this._delegate.totalBytes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return UploadTaskSnapshotCompat;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar UploadTaskCompat = /** @class */function () {\n  function UploadTaskCompat(_delegate, _ref) {\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n  }\n  Object.defineProperty(UploadTaskCompat.prototype, \"snapshot\", {\n    get: function () {\n      return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  UploadTaskCompat.prototype.then = function (onFulfilled, onRejected) {\n    var _this = this;\n    return this._delegate.then(function (snapshot) {\n      if (onFulfilled) {\n        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));\n      }\n    }, onRejected);\n  };\n  UploadTaskCompat.prototype.on = function (type, nextOrObserver, error, completed) {\n    var _this = this;\n    var wrappedNextOrObserver = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = function (taskSnapshot) {\n          return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));\n        };\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next ? function (taskSnapshot) {\n            return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));\n          } : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n  };\n  return UploadTaskCompat;\n}();\nvar ListResultCompat = /** @class */function () {\n  function ListResultCompat(_delegate, _service) {\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n  Object.defineProperty(ListResultCompat.prototype, \"prefixes\", {\n    get: function () {\n      var _this = this;\n      return this._delegate.prefixes.map(function (ref) {\n        return new ReferenceCompat(ref, _this._service);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ListResultCompat.prototype, \"items\", {\n    get: function () {\n      var _this = this;\n      return this._delegate.items.map(function (ref) {\n        return new ReferenceCompat(ref, _this._service);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ListResultCompat.prototype, \"nextPageToken\", {\n    get: function () {\n      return this._delegate.nextPageToken || null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ListResultCompat;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ReferenceCompat = /** @class */function () {\n  function ReferenceCompat(_delegate, storage) {\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n  Object.defineProperty(ReferenceCompat.prototype, \"name\", {\n    get: function () {\n      return this._delegate.name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"bucket\", {\n    get: function () {\n      return this._delegate.bucket;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"fullPath\", {\n    get: function () {\n      return this._delegate.fullPath;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ReferenceCompat.prototype.toString = function () {\n    return this._delegate.toString();\n  };\n  /**\r\n   * @returns A reference to the object obtained by\r\n   * appending childPath, removing any duplicate, beginning, or trailing\r\n   * slashes.\r\n   */\n  ReferenceCompat.prototype.child = function (childPath) {\n    var reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  };\n  Object.defineProperty(ReferenceCompat.prototype, \"root\", {\n    get: function () {\n      return new ReferenceCompat(this._delegate.root, this.storage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"parent\", {\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\n    get: function () {\n      var reference = this._delegate.parent;\n      if (reference == null) {\n        return null;\n      }\n      return new ReferenceCompat(reference, this.storage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Uploads a blob to this object's location.\r\n   * @param data - The blob to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n  ReferenceCompat.prototype.put = function (data, metadata) {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\n  };\n  /**\r\n   * Uploads a string to this object's location.\r\n   * @param value - The string to upload.\r\n   * @param format - The format of the string to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n  ReferenceCompat.prototype.putString = function (value, format, metadata) {\n    if (format === void 0) {\n      format = StringFormat.RAW;\n    }\n    this._throwIfRoot('putString');\n    var data = dataFromString(format, value);\n    var metadataClone = __assign({}, metadata);\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(new UploadTask(this._delegate, new FbsBlob(data.data, true), metadataClone), this);\n  };\n  /**\r\n   * List all items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * This is a helper method for calling list() repeatedly until there are\r\n   * no more results. The default pagination size is 1000.\r\n   *\r\n   * Note: The results may not be consistent if objects are changed while this\r\n   * operation is running.\r\n   *\r\n   * Warning: listAll may potentially consume too many resources if there are\r\n   * too many results.\r\n   *\r\n   * @returns A Promise that resolves with all the items and prefixes under\r\n   *  the current storage reference. `prefixes` contains references to\r\n   *  sub-directories and `items` contains references to objects in this\r\n   *  folder. `nextPageToken` is never returned.\r\n   */\n  ReferenceCompat.prototype.listAll = function () {\n    var _this = this;\n    return listAll(this._delegate).then(function (r) {\n      return new ListResultCompat(r, _this.storage);\n    });\n  };\n  /**\r\n   * List items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * List API is only available for Firebase Rules Version 2.\r\n   *\r\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n   *\r\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n   * support objects whose paths end with \"/\" or contain two consecutive\r\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n   * list() may fail if there are too many unsupported objects in the bucket.\r\n   *\r\n   * @param options - See ListOptions for details.\r\n   * @returns A Promise that resolves with the items and prefixes.\r\n   * `prefixes` contains references to sub-folders and `items`\r\n   * contains references to objects in this folder. `nextPageToken`\r\n   * can be used to get the rest of the results.\r\n   */\n  ReferenceCompat.prototype.list = function (options) {\n    var _this = this;\n    return list(this._delegate, options || undefined).then(function (r) {\n      return new ListResultCompat(r, _this.storage);\n    });\n  };\n  /**\r\n   * A `Promise` that resolves with the metadata for this object. If this\r\n   * object doesn't exist or metadata cannot be retreived, the promise is\r\n   * rejected.\r\n   */\n  ReferenceCompat.prototype.getMetadata = function () {\n    return getMetadata(this._delegate);\n  };\n  /**\r\n   * Updates the metadata for this object.\r\n   * @param metadata - The new metadata for the object.\r\n   * Only values that have been explicitly set will be changed. Explicitly\r\n   * setting a value to null will remove the metadata.\r\n   * @returns A `Promise` that resolves\r\n   * with the new metadata for this object.\r\n   * @see firebaseStorage.Reference.prototype.getMetadata\r\n   */\n  ReferenceCompat.prototype.updateMetadata = function (metadata) {\n    return updateMetadata(this._delegate, metadata);\n  };\n  /**\r\n   * @returns A `Promise` that resolves with the download\r\n   * URL for this object.\r\n   */\n  ReferenceCompat.prototype.getDownloadURL = function () {\n    return getDownloadURL(this._delegate);\n  };\n  /**\r\n   * Deletes the object at this location.\r\n   * @returns A `Promise` that resolves if the deletion succeeds.\r\n   */\n  ReferenceCompat.prototype.delete = function () {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  };\n  ReferenceCompat.prototype._throwIfRoot = function (name) {\n    if (this._delegate._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  };\n  return ReferenceCompat;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\nvar StorageServiceCompat = /** @class */function () {\n  function StorageServiceCompat(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n  Object.defineProperty(StorageServiceCompat.prototype, \"maxOperationRetryTime\", {\n    get: function () {\n      return this._delegate.maxOperationRetryTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StorageServiceCompat.prototype, \"maxUploadRetryTime\", {\n    get: function () {\n      return this._delegate.maxUploadRetryTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns a firebaseStorage.Reference for the given path in the default\r\n   * bucket.\r\n   */\n  StorageServiceCompat.prototype.ref = function (path) {\n    if (isUrl(path)) {\n      throw invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  };\n  /**\r\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n   * which must be a gs:// or http[s]:// URL.\r\n   */\n  StorageServiceCompat.prototype.refFromURL = function (url) {\n    if (!isUrl(url)) {\n      throw invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n    }\n    try {\n      Location.makeFromUrl(url, this._delegate.host);\n    } catch (e) {\n      throw invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  };\n  StorageServiceCompat.prototype.setMaxUploadRetryTime = function (time) {\n    this._delegate.maxUploadRetryTime = time;\n  };\n  StorageServiceCompat.prototype.setMaxOperationRetryTime = function (time) {\n    this._delegate.maxOperationRetryTime = time;\n  };\n  StorageServiceCompat.prototype.useEmulator = function (host, port, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    connectStorageEmulator(this._delegate, host, port, options);\n  };\n  return StorageServiceCompat;\n}();\nvar name = \"@firebase/storage\";\nvar version = \"0.7.1\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Storage.\r\n */\nvar STORAGE_TYPE = 'storage';\nfunction factory(container, _a) {\n  var url = _a.instanceIdentifier;\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  var app = container.getProvider('app').getImmediate();\n  var authProvider = container.getProvider('auth-internal');\n  var appCheckProvider = container.getProvider('app-check-internal');\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  var storageServiceCompat = new StorageServiceCompat(app, new FirebaseStorageImpl(app, authProvider, appCheckProvider, new ConnectionPool(), url, firebase.SDK_VERSION));\n  return storageServiceCompat;\n}\nfunction registerStorage(instance) {\n  var namespaceExports = {\n    // no-inline\n    TaskState: TaskState,\n    TaskEvent: TaskEvent,\n    StringFormat: StringFormat,\n    Storage: FirebaseStorageImpl,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* PUBLIC */).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\nregisterStorage(firebase);\nexport { registerStorage };","map":{"version":3,"names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","FirebaseStorageError","_super","__extends","code","message","_this","call","prependCode","customData","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","_codeEquals","defineProperty","get","set","FirebaseError","unknown","objectNotFound","path","quotaExceeded","bucket","unauthenticated","unauthorizedApp","unauthorized","retryLimitExceeded","canceled","invalidUrl","url","invalidDefaultBucket","noDefaultBucket","cannotSliceBlob","serverFileWrongSize","noDownloadURL","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","decodeBase64","encoded","atob","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","value","b","i","length","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","decodeURIComponent","e","hasMinus","indexOf","hasUnder","invalidChar","hasPlus","hasSlash","replace","bytes","array","DataURLParts","dataURL","base64","matches","match","middle","endsWith","substring","rest","dataUrl","parts","s","end","longEnough","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELED","ERROR","taskStateFromInternalTaskState","state","ErrorCode","XhrConnection","sent_","xhr_","XMLHttpRequest","errorCode_","NO_ERROR","sendPromise_","Promise","resolve","addEventListener","ABORT","NETWORK_ERROR","send","method","body","headers","open","undefined","key","hasOwnProperty","setRequestHeader","toString","getErrorCode","getStatus","status","getResponseText","responseText","abort","getResponseHeader","header","addUploadProgressListener","listener","upload","removeUploadProgressListener","removeEventListener","newConnection","ConnectionPool","createConnection","Location","path_","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","host","bucketLocation","makeFromUrl","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","version","firebaseStorageHost","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","reject","getPromise","cancel","_appDelete","start","f","callback","timeout","waitSeconds","timeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","_i","arguments","apply","callWithDelay","millis","setTimeout","handler","success","__spreadArray","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","clearTimeout","id","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","makeUrl","urlPart","protocolMatch","protocol","origin","makeQueryString","params","queryPart","nextPart","NetworkRequest","successCodes","additionalRetryCodes","errorCallback","progressCallback","pool","pendingConnection_","backoffId_","canceled_","appDelete_","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","progressCallback_","timeout_","pool_","resolve_","reject_","start_","self","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","progressEvent","loaded","total","lengthComputable","then","hitServer","isRetryStatusCode_","wasCanceled","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","err","appDelete","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","isRequestSpecificRetryCode","addAuthHeader_","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","urlParams","assign","errorHandler","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob","bb","append","sliceBlob","blob","webkitSlice","mozSlice","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength_1","forEach","merged_1","index_1","uploadData","jsonObjectOrNull","obj","JSON","parse","parent","index","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","component","join","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","_a","pathWithoutTrailingSlash","reference","_b","_c","item","fromResponseString","RequestInfo","handlerCheck","cndn","metadataHandler","xhr","text","listHandler","downloadUrlHandler","sharedErrorHandler","newErr","includes","objectErrorHandler","shared","getMetadata$2","getMetadata","maxOperationRetryTime","list$2","list","delimiter","pageToken","maxResults","isRoot","getDownloadUrl","updateMetadata$2","updateMetadata","deleteObject$2","deleteObject","_xhr","_text","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","status_","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","Observer","nextOrObserver","complete","asFunctions","next","observer","async","argsToForward","UploadTask","ref","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","completeTransitions_","_transition","_metadataErrorHandler","_promise","_start","_makeProgressCallback","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","_continueUpload","_oneShotUpload","_resolveToken","all","storage","_getAuthToken","_getAppCheckToken","_location","createRequest","_makeRequest","statusRequest","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","wasPaused","externalState","bytesTransferred","totalBytes","task","on","completed","_addObserver","_removeObserver","onFulfilled","onRejected","catch","_notifyObserver","splice","_finishPromise","observers","triggered","bind","snapshot","toCall","resume","pause","Reference","_service","_newRef","_throwIfRoot","uploadBytesResumable$1","uploadBytesResumable","listAll$1","listAll","accumulator","listAllHelper","opt","list$1","nextPage","sent","options","op","makeRequestWithTokens","getMetadata$1","updateMetadata$1","getDownloadURL$1","getDownloadURL","deleteObject$1","_getChild$1","_getChild","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","ref$1","serviceOrRef","pathOrUrl","extractBucket","config","connectStorageEmulator$1","connectStorageEmulator","port","mockUserToken","_overrideAuthToken","createMockUserToken","app","projectId","_authProvider","_appCheckProvider","_pool","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","auth","getImmediate","optional","getToken","tokenData","accessToken","appCheck","_delete","request","clear","request_1","add","delete","getModularInstance","UploadTaskSnapshotCompat","_delegate","UploadTaskCompat","wrappedNextOrObserver","taskSnapshot","ListResultCompat","ReferenceCompat","root","put","putString","__assign","r","StorageServiceCompat","setMaxUploadRetryTime","setMaxOperationRetryTime","useEmulator","STORAGE_TYPE","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","storageServiceCompat","firebase","SDK_VERSION","registerStorage","instance","namespaceExports","Storage","INTERNAL","registerComponent","Component","setServiceProps","setMultipleInstances","registerVersion"],"sources":["/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/constants.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/error.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/platform/browser/base64.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/string.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/taskenums.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/connection.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/platform/browser/connection.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/connectionPool.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/location.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/failrequest.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/backoff.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/type.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/url.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/request.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/fs.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/blob.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/json.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/path.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/metadata.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/list.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/requestinfo.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/requests.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/observer.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/implementation/async.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/task.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/reference.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/src/service.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/exp/api.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/compat/tasksnapshot.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/compat/task.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/compat/list.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/compat/reference.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/compat/service.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/storage/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","import { FirebaseError } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class FirebaseStorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unque to FirebaseStorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code: StorageErrorCode, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, FirebaseStorageError.prototype);\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `FirebaseStorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): FirebaseStorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new FirebaseStorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): FirebaseStorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new FirebaseStorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function invalidArgument(message: string): FirebaseStorageError {\n  return new FirebaseStorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): FirebaseStorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n */\nexport function invalidRootOperation(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(\n  format: string,\n  message: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = string;\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n};\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n */\nexport type TaskState = string;\n\n/**\n * Represents the current state of a running upload.\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Network headers\n */\nexport interface Headers {\n  [name: string]: string;\n}\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n */\nexport interface Connection {\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponseText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Headers,\n  Connection,\n  ErrorCode\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nexport class XhrConnection implements Connection {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport function newConnection(): Connection {\n  return new XhrConnection();\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Replacement for goog.net.XhrIoPool that works with fbs.XhrIo.\n */\nimport { Connection } from './connection';\nimport { newConnection } from '../platform/connection';\n\n/**\n * Factory-like class for creating XhrIo instances.\n */\nexport class ConnectionPool {\n  createConnection(): Connection {\n    return newConnection();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: FirebaseStorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(urlPart: string, host: string): string {\n  const protocolMatch = host.match(/^(\\w+):\\/\\/.+/);\n  const protocol = protocolMatch?.[1];\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { start, stop, id as backoffId } from './backoff';\nimport {\n  FirebaseStorageError,\n  unknown,\n  appDeleted,\n  canceled,\n  retryLimitExceeded\n} from './error';\nimport { RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Headers, Connection, ErrorCode } from './connection';\nimport { ConnectionPool } from './connectionPool';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\nclass NetworkRequest<T> implements Request<T> {\n  private url_: string;\n  private method_: string;\n  private headers_: Headers;\n  private body_: string | Blob | Uint8Array | null;\n  private successCodes_: number[];\n  private additionalRetryCodes_: number[];\n  private pendingConnection_: Connection | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: T | PromiseLike<T>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private callback_: (p1: Connection, p2: string) => T;\n  private errorCallback_:\n    | ((p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null;\n  private progressCallback_: ((p1: number, p2: number) => void) | null;\n  private timeout_: number;\n  private pool_: ConnectionPool;\n  promise_: Promise<T>;\n\n  constructor(\n    url: string,\n    method: string,\n    headers: Headers,\n    body: string | Blob | Uint8Array | null,\n    successCodes: number[],\n    additionalRetryCodes: number[],\n    callback: (p1: Connection, p2: string) => T,\n    errorCallback:\n      | ((p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError)\n      | null,\n    timeout: number,\n    progressCallback: ((p1: number, p2: number) => void) | null,\n    pool: ConnectionPool\n  ) {\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: T | PromiseLike<T>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const self = this;\n\n    function doTheRequest(\n      backoffCallback: (p1: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ): void {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = self.pool_.createConnection();\n      self.pendingConnection_ = connection;\n\n      function progressListener(progressEvent: ProgressEvent): void {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(self.url_, self.method_, self.body_, self.headers_)\n        .then(() => {\n          if (self.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          self.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (!hitServer || self.isRetryStatusCode_(status)) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = self.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    }\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    function backoffDone(\n      requestWentThrough: boolean,\n      status: RequestEndStatus\n    ): void {\n      const resolve = self.resolve_;\n      const reject = self.reject_;\n      const connection = status.connection as Connection;\n      if (status.wasSuccessCode) {\n        try {\n          const result = self.callback_(\n            connection,\n            connection.getResponseText()\n          );\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<T>(\n  requestInfo: RequestInfo<T>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  pool: ConnectionPool,\n  firebaseVersion?: string\n): Request<T> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<T>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    pool\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, FirebaseStorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as unknown as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Headers, Connection } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n\n  errorHandler:\n    | ((p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: (p1: Connection, p2: string) => T,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  FirebaseStorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection, p2: string) => Metadata {\n  function handler(xhr: Connection, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection, p2: string) => ListResult {\n  function handler(xhr: Connection, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection, p2: string) => string | null {\n  function handler(xhr: Connection, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError {\n  function errorHandler(\n    xhr: Connection,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getResponseText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr: Connection, text: string): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { FirebaseStorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: FirebaseStorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `FirebaseStorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `FirebaseStorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  FirebaseStorageError\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  CompleteFn,\n  ErrorFn,\n  Observer,\n  StorageObserver,\n  Subscribe,\n  Unsubscribe\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot } from './tasksnapshot';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserver<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: FirebaseStorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: FirebaseStorageError) => void;\n  private _metadataErrorHandler: (p1: FirebaseStorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: FirebaseStorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `FirebaseStorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | ((a: UploadTaskSnapshot) => unknown),\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: FirebaseStorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(\n    onRejected: (p1: FirebaseStorageError) => T | Promise<T>\n  ): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: FirebaseStorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as FirebaseStorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, parent, lastComponent } from './implementation/path';\nimport {\n  list as requestsList,\n  getMetadata as requestsGetMetadata,\n  updateMetadata as requestsUpdateMetadata,\n  getDownloadUrl as requestsGetDownloadUrl,\n  deleteObject as requestsDeleteObject,\n  multipartUpload\n} from './implementation/requests';\nimport { ListOptions } from '../exp/public-types';\nimport { StringFormat, dataFromString } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { UploadResult } from './tasksnapshot';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo)\n    .then(request => request.getPromise())\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport async function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport async function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport async function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport async function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return (await ref.storage.makeRequestWithTokens(requestInfo))\n    .getPromise()\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport async function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { ConnectionPool } from './implementation/connectionPool';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-exp';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from '../src/implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from '../exp/public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `http://${host}:${port}`;\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @public\n * @param opt_url - gs:// url to a custom Storage Bucket\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   * - protocol://host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _pool: ConnectionPool,\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  get host(): string {\n    return this._host;\n  }\n\n  /**\n   * Set host string for this service.\n   * @param host - host string in the form of host, host:port,\n   * or protocol://host:port\n   */\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<T>(\n    requestInfo: RequestInfo<T>,\n    authToken: string | null,\n    appCheckToken: string | null\n  ): Request<T> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        this._pool,\n        this._firebaseVersion\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<T>(\n    requestInfo: RequestInfo<T>\n  ): Promise<Request<T>> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(requestInfo, authToken, appCheckToken);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app-exp';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from '../src/service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from '../src/metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal\n} from '../src/reference';\nimport { STORAGE_TYPE } from './constants';\nimport { EmulatorMockTokenOptions, getModularInstance } from '@firebase/util';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from '../src/implementation/location';\nexport { UploadTask as _UploadTask } from '../src/task';\nexport type { Reference as _Reference } from '../src/reference';\nexport { FbsBlob as _FbsBlob } from '../src/implementation/blob';\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: string,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\nexport { StringFormat } from '../src/implementation/string';\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage-exp'> = _getProvider(\n    app,\n    STORAGE_TYPE\n  );\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTaskSnapshot } from '../exp/api';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskSnapshotCompat\n  implements types.UploadTaskSnapshot, Compat<UploadTaskSnapshot> {\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): types.FullMetadata {\n    return this._delegate.metadata as types.FullMetadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UploadTask,\n  FirebaseStorageError,\n  UploadTaskSnapshot,\n  TaskEvent,\n  StorageObserver\n} from '../exp/api';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskCompat implements types.UploadTask, Compat<UploadTask> {\n  constructor(\n    readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {}\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: FirebaseStorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: (error: FirebaseStorageError) => void | null,\n    completed?: () => void | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: FirebaseStorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ListResult } from '../exp/api';\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { Compat } from '@firebase/util';\n\nexport class ListResultCompat implements types.ListResult, Compat<ListResult> {\n  constructor(\n    readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StorageReference,\n  uploadBytesResumable,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject,\n  UploadTask,\n  StringFormat,\n  _UploadTask,\n  _getChild,\n  _Reference,\n  _FbsBlob\n} from '../exp/api'; // import from the exp public API\n\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\n\nimport * as types from '@firebase/storage-types';\nimport { Metadata } from '../src/metadata';\nimport { dataFromString } from '../src/implementation/string';\nimport { invalidRootOperation } from '../src/implementation/error';\nimport { Compat } from '@firebase/util';\n\nexport class ReferenceCompat\n  implements types.Reference, Compat<StorageReference>\n{\n  constructor(\n    readonly _delegate: StorageReference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: types.FullMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata as Metadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    const data = dataFromString(format, value);\n    const metadataClone = { ...metadata } as Metadata;\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(\n      new _UploadTask(\n        this._delegate as _Reference,\n        new _FbsBlob(data.data, true),\n        metadataClone\n      ) as UploadTask,\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: types.ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options || undefined).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A `Promise` that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<types.FullMetadata> {\n    return getMetadata(this._delegate) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A `Promise` that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(\n    metadata: types.SettableMetadata\n  ): Promise<types.FullMetadata> {\n    return updateMetadata(\n      this._delegate,\n      metadata as Metadata\n    ) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * @returns A `Promise` that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A `Promise` that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if ((this._delegate as _Reference)._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { FirebaseApp } from '@firebase/app-types';\n\nimport {\n  ref,\n  _Location,\n  connectStorageEmulator,\n  FirebaseStorage\n} from '../exp/api'; // import from the exp public API\nimport { ReferenceCompat } from './reference';\nimport { isUrl, FirebaseStorageImpl } from '../src/service';\nimport { invalidArgument } from '../src/implementation/error';\nimport { Compat, EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat\n  implements types.FirebaseStorage, Compat<FirebaseStorage>\n{\n  constructor(public app: FirebaseApp, readonly _delegate: FirebaseStorage) {}\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      _Location.makeFromUrl(url, (this._delegate as FirebaseStorageImpl).host);\n    } catch (e) {\n      throw invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions | string;\n    } = {}\n  ): void {\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { StringFormat } from './src/implementation/string';\nimport { TaskEvent, TaskState } from './src/implementation/taskenums';\n\nimport { ConnectionPool } from './src/implementation/connectionPool';\nimport { ReferenceCompat } from './compat/reference';\nimport { StorageServiceCompat } from './compat/service';\nimport { FirebaseStorageImpl } from './src/service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from './package.json';\n\nimport './register-module';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    new FirebaseStorageImpl(\n      app,\n      authProvider,\n      appCheckProvider,\n      new ConnectionPool(),\n      url,\n      firebase.SDK_VERSION\n    )\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: FirebaseStorageImpl,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as _FirebaseNamespace);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}