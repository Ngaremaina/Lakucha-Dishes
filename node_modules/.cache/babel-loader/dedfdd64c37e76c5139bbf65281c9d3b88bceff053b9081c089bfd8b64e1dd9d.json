{"ast":null,"code":"import { __values, __read, __awaiter, __generator, __spreadArray } from 'tslib';\nimport { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\nvar Component = /** @class */function () {\n  /**\r\n   *\r\n   * @param name The public service name, e.g. app, auth, firestore, database\r\n   * @param instanceFactory Service factory responsible for creating the public interface\r\n   * @param type whether the service provided by the component is public or private\r\n   */\n  function Component(name, instanceFactory, type) {\n    this.name = name;\n    this.instanceFactory = instanceFactory;\n    this.type = type;\n    this.multipleInstances = false;\n    /**\r\n     * Properties to be added to the service namespace\r\n     */\n    this.serviceProps = {};\n    this.instantiationMode = \"LAZY\" /* LAZY */;\n    this.onInstanceCreated = null;\n  }\n  Component.prototype.setInstantiationMode = function (mode) {\n    this.instantiationMode = mode;\n    return this;\n  };\n  Component.prototype.setMultipleInstances = function (multipleInstances) {\n    this.multipleInstances = multipleInstances;\n    return this;\n  };\n  Component.prototype.setServiceProps = function (props) {\n    this.serviceProps = props;\n    return this;\n  };\n  Component.prototype.setInstanceCreatedCallback = function (callback) {\n    this.onInstanceCreated = callback;\n    return this;\n  };\n  return Component;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\nvar Provider = /** @class */function () {\n  function Provider(name, container) {\n    this.name = name;\n    this.container = container;\n    this.component = null;\n    this.instances = new Map();\n    this.instancesDeferred = new Map();\n    this.instancesOptions = new Map();\n    this.onInitCallbacks = new Map();\n  }\n  /**\r\n   * @param identifier A provider can provide mulitple instances of a service\r\n   * if this.component.multipleInstances is true.\r\n   */\n  Provider.prototype.get = function (identifier) {\n    // if multipleInstances is not supported, use the default name\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      var deferred = new Deferred();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n        // initialize the service if it can be auto-initialized\n        try {\n          var instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n    return this.instancesDeferred.get(normalizedIdentifier).promise;\n  };\n  Provider.prototype.getImmediate = function (options) {\n    var _a;\n    // if multipleInstances is not supported, use the default name\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\n    var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\n    if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(\"Service \" + this.name + \" is not available\");\n      }\n    }\n  };\n  Provider.prototype.getComponent = function () {\n    return this.component;\n  };\n  Provider.prototype.setComponent = function (component) {\n    var e_1, _a;\n    if (component.name !== this.name) {\n      throw Error(\"Mismatching Component \" + component.name + \" for Provider \" + this.name + \".\");\n    }\n    if (this.component) {\n      throw Error(\"Component for \" + this.name + \" has already been provided\");\n    }\n    this.component = component;\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({\n          instanceIdentifier: DEFAULT_ENTRY_NAME\n        });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n    try {\n      // Create service instances for the pending promises and resolve them\n      // NOTE: if this.multipleInstances is false, only the default instance will be created\n      // and all promises with resolve with it regardless of the identifier.\n      for (var _b = __values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n          instanceIdentifier = _d[0],\n          instanceDeferred = _d[1];\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n        try {\n          // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n          var instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          instanceDeferred.resolve(instance);\n        } catch (e) {\n          // when the instance factory throws an exception, it should not cause\n          // a fatal error. We just leave the promise unresolved.\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  Provider.prototype.clearInstance = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  };\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  Provider.prototype.delete = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var services;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            services = Array.from(this.instances.values());\n            return [4 /*yield*/, Promise.all(__spreadArray(__spreadArray([], __read(services.filter(function (service) {\n              return 'INTERNAL' in service;\n            }) // legacy services\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(function (service) {\n              return service.INTERNAL.delete();\n            }))), __read(services.filter(function (service) {\n              return '_delete' in service;\n            }) // modularized services\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(function (service) {\n              return service._delete();\n            }))))];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  Provider.prototype.isComponentSet = function () {\n    return this.component != null;\n  };\n  Provider.prototype.isInitialized = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n    return this.instances.has(identifier);\n  };\n  Provider.prototype.getOptions = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n    return this.instancesOptions.get(identifier) || {};\n  };\n  Provider.prototype.initialize = function (opts) {\n    var e_2, _a;\n    if (opts === void 0) {\n      opts = {};\n    }\n    var _b = opts.options,\n      options = _b === void 0 ? {} : _b;\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(this.name + \"(\" + normalizedIdentifier + \") has already been initialized\");\n    }\n    if (!this.isComponentSet()) {\n      throw Error(\"Component \" + this.name + \" has not been registered yet\");\n    }\n    var instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options: options\n    });\n    try {\n      // resolve any pending promise waiting for the service instance\n      for (var _c = __values(this.instancesDeferred.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var _e = __read(_d.value, 2),\n          instanceIdentifier = _e[0],\n          instanceDeferred = _e[1];\n        var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n        if (normalizedIdentifier === normalizedDeferredIdentifier) {\n          instanceDeferred.resolve(instance);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    return instance;\n  };\n  /**\r\n   *\r\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n   *\r\n   * @param identifier An optional instance identifier\r\n   * @returns a function to unregister the callback\r\n   */\n  Provider.prototype.onInit = function (callback, identifier) {\n    var _a;\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n    var existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n    return function () {\n      existingCallbacks.delete(callback);\n    };\n  };\n  /**\r\n   * Invoke onInit callbacks synchronously\r\n   * @param instance the service instance`\r\n   */\n  Provider.prototype.invokeOnInitCallbacks = function (instance, identifier) {\n    var e_3, _a;\n    var callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    try {\n      for (var callbacks_1 = __values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {\n        var callback = callbacks_1_1.value;\n        try {\n          callback(instance, identifier);\n        } catch (_b) {\n          // ignore errors in the onInit callback\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  Provider.prototype.getOrInitializeService = function (_a) {\n    var instanceIdentifier = _a.instanceIdentifier,\n      _b = _a.options,\n      options = _b === void 0 ? {} : _b;\n    var instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options: options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n      /**\r\n       * Invoke onInit listeners.\r\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n       * while onInit listeners are registered by consumers of the provider.\r\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n      /**\r\n       * Order is important\r\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n       * makes `isInitialized()` return true.\r\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\n        } catch (_c) {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n    return instance || null;\n  };\n  Provider.prototype.normalizeInstanceIdentifier = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  };\n\n  Provider.prototype.shouldAutoInitialize = function () {\n    return !!this.component && this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */;\n  };\n\n  return Provider;\n}();\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier) {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\nfunction isComponentEager(component) {\n  return component.instantiationMode === \"EAGER\" /* EAGER */;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\nvar ComponentContainer = /** @class */function () {\n  function ComponentContainer(name) {\n    this.name = name;\n    this.providers = new Map();\n  }\n  /**\r\n   *\r\n   * @param component Component being added\r\n   * @param overwrite When a component with the same name has already been registered,\r\n   * if overwrite is true: overwrite the existing component with the new component and create a new\r\n   * provider with the new component. It can be useful in tests where you want to use different mocks\r\n   * for different tests.\r\n   * if overwrite is false: throw an exception\r\n   */\n  ComponentContainer.prototype.addComponent = function (component) {\n    var provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\"Component \" + component.name + \" has already been registered with \" + this.name);\n    }\n    provider.setComponent(component);\n  };\n  ComponentContainer.prototype.addOrOverwriteComponent = function (component) {\n    var provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n    this.addComponent(component);\n  };\n  /**\r\n   * getProvider provides a type safe interface where it can only be called with a field name\r\n   * present in NameServiceMapping interface.\r\n   *\r\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n   * themselves.\r\n   */\n  ComponentContainer.prototype.getProvider = function (name) {\n    if (this.providers.has(name)) {\n      return this.providers.get(name);\n    }\n    // create a Provider for a service that hasn't registered with Firebase\n    var provider = new Provider(name, this);\n    this.providers.set(name, provider);\n    return provider;\n  };\n  ComponentContainer.prototype.getProviders = function () {\n    return Array.from(this.providers.values());\n  };\n  return ComponentContainer;\n}();\nexport { Component, ComponentContainer, Provider };","map":{"version":3,"names":["Component","name","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","prototype","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","callback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","Deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","resolve","e","promise","getImmediate","options","optional","_a","Error","getComponent","setComponent","isComponentEager","_b","__values","entries","_c","next","done","_d","__read","value","instanceDeferred","clearInstance","delete","services","Array","from","values","Promise","all","__spreadArray","filter","service","map","INTERNAL","_delete","sent","isComponentSet","getOptions","initialize","opts","_e","normalizedDeferredIdentifier","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","callbacks_1","callbacks_1_1","normalizeIdentifierForFactory","undefined","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders"],"sources":["/home/ngare/Projects/Lakucha/node_modules/@firebase/component/src/component.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/component/src/constants.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/component/src/provider.ts","/home/ngare/Projects/Lakucha/node_modules/@firebase/component/src/component_container.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return (this.providers.get(name) as unknown) as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, (provider as unknown) as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}