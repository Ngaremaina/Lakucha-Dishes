{"ast":null,"code":"/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _a;\n/**\r\n * A container for all of the Logger instances\r\n */\nvar instances = [];\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\n  LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n  LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\n  LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nvar levelStringToEnum = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n/**\r\n * The default log level\r\n */\nvar defaultLogLevel = LogLevel.INFO;\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\nvar ConsoleMethod = (_a = {}, _a[LogLevel.DEBUG] = 'log', _a[LogLevel.VERBOSE] = 'log', _a[LogLevel.INFO] = 'info', _a[LogLevel.WARN] = 'warn', _a[LogLevel.ERROR] = 'error', _a);\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\nvar defaultLogHandler = function (instance, logType) {\n  var args = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n  if (logType < instance.logLevel) {\n    return;\n  }\n  var now = new Date().toISOString();\n  var method = ConsoleMethod[logType];\n  if (method) {\n    console[method].apply(console, __spreadArrays([\"[\" + now + \"]  \" + instance.name + \":\"], args));\n  } else {\n    throw new Error(\"Attempted to log a message with an invalid logType (value: \" + logType + \")\");\n  }\n};\nvar Logger = /** @class */function () {\n  /**\r\n   * Gives you an instance of a Logger to capture messages according to\r\n   * Firebase's logging scheme.\r\n   *\r\n   * @param name The name that the logs will be associated with\r\n   */\n  function Logger(name) {\n    this.name = name;\n    /**\r\n     * The log level of the given Logger instance.\r\n     */\n    this._logLevel = defaultLogLevel;\n    /**\r\n     * The main (internal) log handler for the Logger instance.\r\n     * Can be set to a new function in internal package code but not by user.\r\n     */\n    this._logHandler = defaultLogHandler;\n    /**\r\n     * The optional, additional, user-defined log handler for the Logger instance.\r\n     */\n    this._userLogHandler = null;\n    /**\r\n     * Capture the current instance for later use\r\n     */\n    instances.push(this);\n  }\n  Object.defineProperty(Logger.prototype, \"logLevel\", {\n    get: function () {\n      return this._logLevel;\n    },\n    set: function (val) {\n      if (!(val in LogLevel)) {\n        throw new TypeError(\"Invalid value \\\"\" + val + \"\\\" assigned to `logLevel`\");\n      }\n      this._logLevel = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  // Workaround for setter/getter having to be the same type.\n  Logger.prototype.setLogLevel = function (val) {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  };\n  Object.defineProperty(Logger.prototype, \"logHandler\", {\n    get: function () {\n      return this._logHandler;\n    },\n    set: function (val) {\n      if (typeof val !== 'function') {\n        throw new TypeError('Value assigned to `logHandler` must be a function');\n      }\n      this._logHandler = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Logger.prototype, \"userLogHandler\", {\n    get: function () {\n      return this._userLogHandler;\n    },\n    set: function (val) {\n      this._userLogHandler = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * The functions below are all based on the `console` interface\r\n   */\n  Logger.prototype.debug = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));\n    this._logHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));\n  };\n  Logger.prototype.log = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));\n    this._logHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));\n  };\n  Logger.prototype.info = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));\n    this._logHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));\n  };\n  Logger.prototype.warn = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));\n    this._logHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));\n  };\n  Logger.prototype.error = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));\n    this._logHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));\n  };\n  return Logger;\n}();\nfunction setLogLevel(level) {\n  instances.forEach(function (inst) {\n    inst.setLogLevel(level);\n  });\n}\nfunction setUserLogHandler(logCallback, options) {\n  var _loop_1 = function (instance) {\n    var customLogLevel = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = function (instance, level) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n          args[_i - 2] = arguments[_i];\n        }\n        var message = args.map(function (arg) {\n          if (arg == null) {\n            return null;\n          } else if (typeof arg === 'string') {\n            return arg;\n          } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n            return arg.toString();\n          } else if (arg instanceof Error) {\n            return arg.message;\n          } else {\n            try {\n              return JSON.stringify(arg);\n            } catch (ignored) {\n              return null;\n            }\n          }\n        }).filter(function (arg) {\n          return arg;\n        }).join(' ');\n        if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase(),\n            message: message,\n            args: args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  };\n  for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {\n    var instance = instances_1[_i];\n    _loop_1(instance);\n  }\n}\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };","map":{"version":3,"names":["instances","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","_a","defaultLogHandler","instance","logType","args","_i","arguments","length","logLevel","now","Date","toISOString","method","console","apply","__spreadArrays","name","Error","Logger","_logLevel","_logHandler","_userLogHandler","push","Object","defineProperty","prototype","get","set","val","TypeError","setLogLevel","debug","log","info","warn","error","level","forEach","inst","setUserLogHandler","logCallback","options","customLogLevel","userLogHandler","message","map","arg","toString","JSON","stringify","ignored","filter","join","toLowerCase","type","instances_1"],"sources":["/home/ngare/Projects/Lakucha/node_modules/@firebase/logger/src/logger.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}